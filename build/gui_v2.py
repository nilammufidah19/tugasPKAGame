# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

import random
from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, TclError

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"./assets/frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


root = Tk()

root.title("Kitty Cup")
root.iconbitmap(r"C:\Users\62823\Downloads\GUI (2)\GUI\build\assets\frame0")
root.geometry("1440x1024")
root.configure(bg="#F2EFED")

canvas = Canvas(
    root,
    bg="#F2EFED",
    height=1024,
    width=1440,
    bd=0,
    highlightthickness=0,
    relief="ridge"
)

canvas.place(x=0, y=0)

############################# MAIN AREA #################################
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
main_area = canvas.create_image(
    561.0,
    512.0,
    image=image_image_1,
    tags=("default_main_area")
)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
tile1 = canvas.create_image(
    735.0,
    685.0,
    image=image_image_2,
    tags=("default_main_area")
)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
tile2 = canvas.create_image(
    562.0,
    685.0,
    image=image_image_3,
    tags=("default_main_area")
)

image_image_4 = PhotoImage(
    file=relative_to_assets("image_4.png"))
tile3 = canvas.create_image(
    387.0,
    685.0,
    image=image_image_4,
    tags=("default_main_area")
)

image_image_5 = PhotoImage(
    file=relative_to_assets("image_5.png"))
tile4 = canvas.create_image(
    735.0,
    511.0,
    image=image_image_5,
    tags=("default_main_area")
)

image_image_6 = PhotoImage(
    file=relative_to_assets("image_6.png"))
tile5 = canvas.create_image(
    562.0,
    511.0,
    image=image_image_6,
    tags=("default_main_area")
)

image_image_7 = PhotoImage(
    file=relative_to_assets("image_7.png"))
tile6 = canvas.create_image(
    387.0,
    511.0,
    image=image_image_7,
    tags=("default_main_area")
)

image_image_8 = PhotoImage(
    file=relative_to_assets("image_8.png"))
tile7 = canvas.create_image(
    735.0,
    338.0,
    image=image_image_8,
    tags=("default_main_area")
)

image_image_9 = PhotoImage(
    file=relative_to_assets("image_9.png"))
tile8 = canvas.create_image(
    562.0,
    338.0,
    image=image_image_9,
    tags=("default_main_area")
)

image_image_10 = PhotoImage(
    file=relative_to_assets("image_10.png"))
tile9 = canvas.create_image(
    387.0,
    338.0,
    image=image_image_10,
    tags=("default_main_area")
)

############################# SCORE AREA #################################
image_image_11 = PhotoImage(
    file=relative_to_assets("image_11.png"))
my_score = canvas.create_image(
    1055.5,
    699.0,
    image=image_image_11,
    tags=("score_area")
)

image_image_12 = PhotoImage(
    file=relative_to_assets("image_12.png"))
his_score = canvas.create_image(
    1055.0,
    599.0,
    image=image_image_12,
    tags=("score_area")
)

entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_1.png"))
entry_bg_1 = canvas.create_image(
    1120.0,
    599.5,
    image=entry_image_1,
    tags=("score_area")
)
his_entry_score = Entry(
    bd=0,
    # bg="#D7DEF0",
    readonlybackground="#d7def0",
    fg="#004AAD",
    font=("Comic Sans MS", 25, "bold"),
    highlightthickness=0,
    state="normal"
)

his_entry_score_id = canvas.create_window(
    1105, 600.0, window=his_entry_score
)

canvas.itemconfig(his_entry_score_id, width=50, height=30)
# his_entry_score.insert(0, "10")
his_entry_score.config(state="readonly")

entry_image_2 = PhotoImage(
    file=relative_to_assets("entry_2.png"))
her_entry_score = canvas.create_image(
    1105.0,
    699.5,
    image=entry_image_2,
    tags=("score_area")
)
her_entry_score = Entry(
    bd=0,
    # bg="#FBDFEF",
    readonlybackground="#fbdfef",
    fg="#F2649E",
    font=("Comic Sans MS", 25, "bold"),
    highlightthickness=0,
    state="normal"

)
her_entry_score_id = canvas.create_window(
    1090, 700.0, window=her_entry_score
)

canvas.itemconfig(her_entry_score_id, width=50, height=30)


her_entry_score.config(state="readonly")

############################# CARD AREA #################################

image_image_13 = PhotoImage(
    file=relative_to_assets("image_13.png"))
mca1 = canvas.create_image(
    388.0,
    892.0,
    image=image_image_13,
    tags=("card_area")
)

mca2 = canvas.create_image(
    727.0,
    892.0,
    image=image_image_13,
    tags=("card_area")
)

mca3 = canvas.create_image(
    558.0,
    892.0,
    image=image_image_13,
    tags=("card_area")
)

hca1 = canvas.create_image(
    388.0,
    142.0,
    image=image_image_13,
    tags=("card_area")
)

hca2 = canvas.create_image(
    558.0,
    142.0,
    image=image_image_13,
    tags=("card_area")
)

hca3 = canvas.create_image(
    728.0,
    142.0,
    image=image_image_13,
    tags=("card_area")
)

image_back_card = PhotoImage(
    file=relative_to_assets("image_68.png"))
hc1 = canvas.create_image(
    388.0,
    142.0,
    image=image_back_card,
    tags=("card_area", "back_card")
)

hc2 = canvas.create_image(
    558.0,
    142.0,
    image=image_back_card,
    tags=("card_area", "back_card")
)

hc3 = canvas.create_image(
    728.0,
    142.0,
    image=image_back_card,
    tags=("card_area", "back_card_last")
)

############################# CARD BUTTON #################################
button_image_31 = PhotoImage(
    file=relative_to_assets("button_31.png"))
kp11 = Button(
    image=button_image_31,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(kp11)
)
button_data = {"id": "kp11", "warna": "putih", "angka": 1}
# Store all data as attributes
kp11.id = button_data["id"]
kp11.warna = button_data["warna"]
kp11.angka = button_data["angka"]

kp12 = Button(
    image=button_image_31,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(kp12)
)
button_data = {"id": "kp12", "warna": "putih", "angka": 1}
# Store all data as attributes
kp12.id = button_data["id"]
kp12.warna = button_data["warna"]
kp12.angka = button_data["angka"]

kp13 = Button(
    image=button_image_31,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(kp13)
)
button_data = {"id": "kp13", "warna": "putih", "angka": 1}
# Store all data as attributes
kp13.id = button_data["id"]
kp13.warna = button_data["warna"]
kp13.angka = button_data["angka"]

button_image_32 = PhotoImage(
    file=relative_to_assets("button_32.png"))
kp21 = Button(
    image=button_image_32,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(kp21)
)
button_data = {"id": "kp21", "warna": "putih", "angka": 2}
# Store all data as attributes
kp21.id = button_data["id"]
kp21.warna = button_data["warna"]
kp21.angka = button_data["angka"]

kp22 = Button(
    image=button_image_32,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(kp22)
)
button_data = {"id": "kp22", "warna": "putih", "angka": 2}
# Store all data as attributes
kp22.id = button_data["id"]
kp22.warna = button_data["warna"]
kp22.angka = button_data["angka"]

kp23 = Button(
    image=button_image_32,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(kp23)
)
button_data = {"id": "kp23", "warna": "putih", "angka": 2}
# Store all data as attributes
kp23.id = button_data["id"]
kp23.warna = button_data["warna"]
kp23.angka = button_data["angka"]

button_image_30 = PhotoImage(
    file=relative_to_assets("button_30.png"))
kp31 = Button(
    image=button_image_30,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(kp31)
)
button_data = {"id": "kp31", "warna": "putih", "angka": 3}
# Store all data as attributes
kp31.id = button_data["id"]
kp31.warna = button_data["warna"]
kp31.angka = button_data["angka"]

kp32 = Button(
    image=button_image_30,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(kp32)
)
button_data = {"id": "kp32", "warna": "putih", "angka": 3}
# Store all data as attributes
kp32.id = button_data["id"]
kp32.warna = button_data["warna"]
kp32.angka = button_data["angka"]

kp33 = Button(
    image=button_image_30,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(kp33)
)
button_data = {"id": "kp33", "warna": "putih", "angka": 3}
# Store all data as attributes
kp33.id = button_data["id"]
kp33.warna = button_data["warna"]
kp33.angka = button_data["angka"]

button_image_20 = PhotoImage(
    file=relative_to_assets("button_20.png"))
kb11 = Button(
    image=button_image_20,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(kb11)
)
button_data = {"id": "kb11", "warna": "biru", "angka": 1}
# Store all data as attributes
kb11.id = button_data["id"]
kb11.warna = button_data["warna"]
kb11.angka = button_data["angka"]

kb12 = Button(
    image=button_image_20,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(kb12)
)
button_data = {"id": "kb12", "warna": "biru", "angka": 1}
# Store all data as attributes
kb12.id = button_data["id"]
kb12.warna = button_data["warna"]
kb12.angka = button_data["angka"]

kb13 = Button(
    image=button_image_20,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(kb13)
)
button_data = {"id": "kb13", "warna": "biru", "angka": 1}
# Store all data as attributes
kb13.id = button_data["id"]
kb13.warna = button_data["warna"]
kb13.angka = button_data["angka"]

button_image_21 = PhotoImage(
    file=relative_to_assets("button_21.png"))
kb21 = Button(
    image=button_image_21,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(kb21)
)
button_data = {"id": "kb21", "warna": "biru", "angka": 2}
# Store all data as attributes
kb21.id = button_data["id"]
kb21.warna = button_data["warna"]
kb21.angka = button_data["angka"]

kb22 = Button(
    image=button_image_21,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(kb22)
)
button_data = {"id": "kb22", "warna": "biru", "angka": 2}
# Store all data as attributes
kb22.id = button_data["id"]
kb22.warna = button_data["warna"]
kb22.angka = button_data["angka"]

kb23 = Button(
    image=button_image_21,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(kb23)
)
button_data = {"id": "kb23", "warna": "biru", "angka": 2}
# Store all data as attributes
kb23.id = button_data["id"]
kb23.warna = button_data["warna"]
kb23.angka = button_data["angka"]

button_image_22 = PhotoImage(
    file=relative_to_assets("button_22.png"))
kb31 = Button(
    image=button_image_22,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(kb31)
)
button_data = {"id": "kb31", "warna": "biru", "angka": 3}
# Store all data as attributes
kb31.id = button_data["id"]
kb31.warna = button_data["warna"]
kb31.angka = button_data["angka"]

kb32 = Button(
    image=button_image_22,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(kb32)
)
button_data = {"id": "kb32", "warna": "biru", "angka": 3}
# Store all data as attributes
kb32.id = button_data["id"]
kb32.warna = button_data["warna"]
kb32.angka = button_data["angka"]

kb33 = Button(
    image=button_image_22,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(kb33)
)
button_data = {"id": "kb33", "warna": "biru", "angka": 3}
# Store all data as attributes
kb33.id = button_data["id"]
kb33.warna = button_data["warna"]
kb33.angka = button_data["angka"]

# Button_24
button_image_24 = PhotoImage(
    file=relative_to_assets("button_24.png"))
km11 = Button(
    image=button_image_24,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(km11)
)
button_data = {"id": "km11", "warna": "merah", "angka": 1}
# Store all data as attributes
km11.id = button_data["id"]
km11.warna = button_data["warna"]
km11.angka = button_data["angka"]

km12 = Button(
    image=button_image_24,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(km12)
)
button_data = {"id": "km12", "warna": "merah", "angka": 1}
# Store all data as attributes
km12.id = button_data["id"]
km12.warna = button_data["warna"]
km12.angka = button_data["angka"]

km13 = Button(
    image=button_image_24,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(km13)
)
button_data = {"id": "km13", "warna": "merah", "angka": 1}
# Store all data as attributes
km13.id = button_data["id"]
km13.warna = button_data["warna"]
km13.angka = button_data["angka"]

# Button_25
button_image_25 = PhotoImage(
    file=relative_to_assets("button_25.png"))
km21 = Button(
    image=button_image_25,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(km21)
)
button_data = {"id": "km21", "warna": "merah", "angka": 2}
# Store all data as attributes
km21.id = button_data["id"]
km21.warna = button_data["warna"]
km21.angka = button_data["angka"]

km22 = Button(
    image=button_image_25,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(km22)
)
button_data = {"id": "km22", "warna": "merah", "angka": 2}
# Store all data as attributes
km22.id = button_data["id"]
km22.warna = button_data["warna"]
km22.angka = button_data["angka"]

km23 = Button(
    image=button_image_25,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(km23)
)
button_data = {"id": "km23", "warna": "merah", "angka": 2}
# Store all data as attributes
km23.id = button_data["id"]
km23.warna = button_data["warna"]
km23.angka = button_data["angka"]

# Button_26
button_image_26 = PhotoImage(
    file=relative_to_assets("button_26.png"))
km31 = Button(
    image=button_image_26,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(km31)
)
button_data = {"id": "km31", "warna": "merah", "angka": 3}
# Store all data as attributes
km31.id = button_data["id"]
km31.warna = button_data["warna"]
km31.angka = button_data["angka"]

km32 = Button(
    image=button_image_26,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(km32)
)
button_data = {"id": "km32", "warna": "merah", "angka": 3}
# Store all data as attributes
km32.id = button_data["id"]
km32.warna = button_data["warna"]
km32.angka = button_data["angka"]

km33 = Button(
    image=button_image_26,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(km33)
)
button_data = {"id": "km33", "warna": "merah", "angka": 3}
# Store all data as attributes
km33.id = button_data["id"]
km33.warna = button_data["warna"]
km33.angka = button_data["angka"]

###### card for komputer
posisi_ = 3
warna_ = {"kpc": "putih", "kmc": "merah", "kbc": "biru"}
angka = 3
button_image_kom = PhotoImage(
    file=relative_to_assets("image_68.png"))

buttons_komputer = {}
for psi in range(1, posisi_+1):
    for wri in warna_.keys():
        for angkai in range(1, angka+1):
            button_id = f"{wri}{angkai}{psi}"
            button_data = {"id": button_id, "warna": warna_[wri], "angka": angkai}
            # Membuat button
            btn = Button(
                image=button_image_kom,
                borderwidth=0,
                highlightthickness=0,
                relief="flat",
                command=lambda b_id=button_id: handle_button_click_kom(buttons_komputer[b_id])
            )

            # Menyimpan atribut tambahan
            btn.id = button_data["id"]
            btn.warna = button_data["warna"]
            btn.angka = button_data["angka"]

            # Simpan ke dictionary
            buttons_komputer[button_id] = btn

############################# TITLE #################################
image_image_19 = PhotoImage(
    file=relative_to_assets("image_19.png"))
title_game = canvas.create_image(
    1054.0,
    395.0,
    image=image_image_19,
    tags=("title_game")
)

title_start = canvas.create_image(
    736.0,
    324.0,
    image=image_image_19,
    tags=("title_start")
)

############################# PLAYER AREA #################################
image_image_29 = PhotoImage(
    file=relative_to_assets("image_29.png"))
my_area = canvas.create_image(
    1323.0,
    115.0,
    image=image_image_29,
    tags=("tile", "pink_tile")
)
canvas.itemconfig(my_area, state='hidden')

image_image_30 = PhotoImage(
    file=relative_to_assets("image_30.png"))
his_area = canvas.create_image(
    1323.0,
    309.0,
    image=image_image_30,
    tags=("tile", "blue_tile")
)
canvas.itemconfig(his_area, state='hidden')

image_image_31 = PhotoImage(
    file=relative_to_assets("image_31.png"))
default_area = canvas.create_image(
    1119.0,
    115.0,
    image=image_image_31,
    tags=("tile", "default_tile")
)
canvas.itemconfig(default_area, state='hidden')

############################# DEFAULT CUP BUTTON #################################

button_image_7 = PhotoImage(
    file=relative_to_assets("button_7.png"))
putih_glass_1 = Button(
    image=button_image_7,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(putih_glass_1, "cup")
)
putih_glass_1.place(
    width=157.0,
    height=155.0
)
gp1 = canvas.create_window(387.0, 330.0, window=putih_glass_1)
button_data = {"id": "p1", "status": "kosong", "warna": "putih"}
# Store all data as attributes
putih_glass_1.id = button_data["id"]
putih_glass_1.status = button_data["status"]
putih_glass_1.warna = button_data["warna"]

button_image_8 = PhotoImage(
    file=relative_to_assets("button_8.png"))
putih_glass_2 = Button(
    image=button_image_8,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: handle_button_click(putih_glass_2, "cup"),
    relief="flat"
)
putih_glass_2.place(
    width=157.0,
    height=155.0
)
gp2 = canvas.create_window(563.0, 330.0, window=putih_glass_2)
button_data = {"id": "p2", "status": "kosong", "warna": "putih"}
# Store all data as attributes
putih_glass_2.id = button_data["id"]
putih_glass_2.status = button_data["status"]
putih_glass_2.warna = button_data["warna"]

button_image_9 = PhotoImage(
    file=relative_to_assets("button_9.png"))
putih_glass_3 = Button(
    image=button_image_9,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: handle_button_click(putih_glass_3, "cup"),
    relief="flat"
)
putih_glass_3.place(
    width=157.0,
    height=155.0
)
gp3 = canvas.create_window(738.0, 330.0, window=putih_glass_3)
button_data = {"id": "p3", "status": "kosong", "warna": "putih"}
# Store all data as attributes
putih_glass_3.id = button_data["id"]
putih_glass_3.status = button_data["status"]
putih_glass_3.warna = button_data["warna"]

button_image_10 = PhotoImage(
    file=relative_to_assets("button_10.png"))
putih_glass_4 = Button(
    image=button_image_10,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: handle_button_click(putih_glass_4, "cup"),
    relief="flat"
)
putih_glass_4.place(
    width=157.0,
    height=155.0
)
gp4 = canvas.create_window(387.0, 507.0, window=putih_glass_4)
button_data = {"id": "p4", "status": "kosong", "warna": "putih"}
# Store all data as attributes
putih_glass_4.id = button_data["id"]
putih_glass_4.status = button_data["status"]
putih_glass_4.warna = button_data["warna"]

button_image_11 = PhotoImage(
    file=relative_to_assets("button_11.png"))
putih_glass_5 = Button(
    image=button_image_11,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: handle_button_click(putih_glass_5, "cup"),
    relief="flat"
)
putih_glass_5.place(
    width=157.0,
    height=155.0
)
gp5 = canvas.create_window(563.0, 507.0, window=putih_glass_5)
button_data = {"id": "p5", "status": "kosong", "warna": "putih"}
# Store all data as attributes
putih_glass_5.id = button_data["id"]
putih_glass_5.status = button_data["status"]
putih_glass_5.warna = button_data["warna"]

button_image_12 = PhotoImage(
    file=relative_to_assets("button_12.png"))
putih_glass_6 = Button(
    image=button_image_12,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: handle_button_click(putih_glass_6, "cup"),
    relief="flat"
)
putih_glass_6.place(
    width=157.0,
    height=155.0
)
gp6 = canvas.create_window(738.0, 507.0, window=putih_glass_6)
button_data = {"id": "p6", "status": "kosong", "warna": "putih"}
# Store all data as attributes
putih_glass_6.id = button_data["id"]
putih_glass_6.status = button_data["status"]
putih_glass_6.warna = button_data["warna"]

button_image_13 = PhotoImage(
    file=relative_to_assets("button_13.png"))
putih_glass_7 = Button(
    image=button_image_13,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: handle_button_click(putih_glass_7, "cup"),
    relief="flat"
)
putih_glass_7.place(
    width=157.0,
    height=155.0
)
gp7 = canvas.create_window(387.0, 684.0, window=putih_glass_7)
button_data = {"id": "p7", "status": "kosong", "warna": "putih"}
# Store all data as attributes
putih_glass_7.id = button_data["id"]
putih_glass_7.status = button_data["status"]
putih_glass_7.warna = button_data["warna"]

button_image_14 = PhotoImage(
    file=relative_to_assets("button_14.png"))
putih_glass_8 = Button(
    image=button_image_14,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: handle_button_click(putih_glass_8, "cup"),
    relief="flat"
)
putih_glass_8.place(
    width=157.0,
    height=155.0
)
gp8 = canvas.create_window(563.0, 684.0, window=putih_glass_8)
button_data = {"id": "p8", "status": "kosong", "warna": "putih"}
# Store all data as attributes
putih_glass_8.id = button_data["id"]
putih_glass_8.status = button_data["status"]
putih_glass_8.warna = button_data["warna"]

button_image_6 = PhotoImage(
    file=relative_to_assets("button_6.png"))
putih_glass_9 = Button(
    image=button_image_6,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: handle_button_click(putih_glass_9, "cup"),
    relief="flat"
)
putih_glass_9.place(
    width=157.0,
    height=155.0
)
gp9 = canvas.create_window(738.0, 684.0, window=putih_glass_9)
button_data = {"id": "p9", "status": "kosong", "warna": "putih"}
# Store all data as attributes
putih_glass_9.id = button_data["id"]
putih_glass_9.status = button_data["status"]
putih_glass_9.warna = button_data["warna"]

####################### DEFAULT COLORED CUP BUTTON #############################
button_image_33 = PhotoImage(
    file=relative_to_assets("button_33.png"))
biru_glass_1 = Button(
    image=button_image_33,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(biru_glass_1, "cup")
)
biru_glass_1.place(
    width=157.0,
    height=155.0
)
gb1 = canvas.create_window(387.0, 330.0, window=biru_glass_1)
button_data = {"id": "p1", "status": "kosong", "warna": "biru"}
# Store all data as attributes
biru_glass_1.id = button_data["id"]
biru_glass_1.status = button_data["status"]
biru_glass_1.warna = button_data["warna"]

biru_glass_2 = Button(
    image=button_image_33,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(biru_glass_2, "cup")
)
biru_glass_2.place(
    width=157.0,
    height=155.0
)
gb2 = canvas.create_window(563.0, 330.0, window=biru_glass_2)
button_data = {"id": "p2", "status": "kosong", "warna": "biru"}
# Store all data as attributes
biru_glass_2.id = button_data["id"]
biru_glass_2.status = button_data["status"]
biru_glass_2.warna = button_data["warna"]

biru_glass_3 = Button(
    image=button_image_33,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(biru_glass_3, "cup")
)
biru_glass_3.place(
    width=157.0,
    height=155.0
)
gb3 = canvas.create_window(738.0, 330.0, window=biru_glass_3)
button_data = {"id": "p3", "status": "kosong", "warna": "biru"}
# Store all data as attributes
biru_glass_3.id = button_data["id"]
biru_glass_3.status = button_data["status"]
biru_glass_3.warna = button_data["warna"]

biru_glass_4 = Button(
    image=button_image_33,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(biru_glass_4, "cup")
)
biru_glass_4.place(
    width=157.0,
    height=155.0
)
gb4 = canvas.create_window(387.0, 507.0, window=biru_glass_4)
button_data = {"id": "p4", "status": "kosong", "warna": "biru"}
# Store all data as attributes
biru_glass_4.id = button_data["id"]
biru_glass_4.status = button_data["status"]
biru_glass_4.warna = button_data["warna"]

biru_glass_5 = Button(
    image=button_image_33,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(biru_glass_5, "cup")
)
biru_glass_5.place(
    width=157.0,
    height=155.0
)
gb5 = canvas.create_window(563.0, 507.0, window=biru_glass_5)
button_data = {"id": "p5", "status": "kosong", "warna": "biru"}
# Store all data as attributes
biru_glass_5.id = button_data["id"]
biru_glass_5.status = button_data["status"]
biru_glass_5.warna = button_data["warna"]

biru_glass_6 = Button(
    image=button_image_33,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(biru_glass_6, "cup")
)
biru_glass_6.place(
    width=157.0,
    height=155.0
)
gb6 = canvas.create_window(738.0, 507.0, window=biru_glass_6)
button_data = {"id": "p6", "status": "kosong", "warna": "biru"}
# Store all data as attributes
biru_glass_6.id = button_data["id"]
biru_glass_6.status = button_data["status"]
biru_glass_6.warna = button_data["warna"]

biru_glass_7 = Button(
    image=button_image_33,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(biru_glass_7, "cup")
)
biru_glass_7.place(
    width=157.0,
    height=155.0
)
gb7 = canvas.create_window(387.0, 684.0, window=biru_glass_7)
button_data = {"id": "p7", "status": "kosong", "warna": "biru"}
# Store all data as attributes
biru_glass_7.id = button_data["id"]
biru_glass_7.status = button_data["status"]
biru_glass_7.warna = button_data["warna"]

biru_glass_8 = Button(
    image=button_image_33,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(biru_glass_8, "cup")
)
biru_glass_8.place(
    width=157.0,
    height=155.0
)
gb8 = canvas.create_window(563.0, 684.0, window=biru_glass_8)
button_data = {"id": "p8", "status": "kosong", "warna": "biru"}
# Store all data as attributes
biru_glass_8.id = button_data["id"]
biru_glass_8.status = button_data["status"]
biru_glass_8.warna = button_data["warna"]

biru_glass_9 = Button(
    image=button_image_33,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(biru_glass_9, "cup")
)
biru_glass_9.place(
    width=157.0,
    height=155.0
)
gb9 = canvas.create_window(738.0, 684.0, window=biru_glass_9)
button_data = {"id": "p9", "status": "kosong", "warna": "biru"}
# Store all data as attributes
biru_glass_9.id = button_data["id"]
biru_glass_9.status = button_data["status"]
biru_glass_9.warna = button_data["warna"]

button_image_34 = PhotoImage(
    file=relative_to_assets("button_34.png"))
merah_glass_1 = Button(
    image=button_image_34,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(merah_glass_1, "cup")
)
merah_glass_1.place(
    width=157.0,
    height=155.0
)
gm1 = canvas.create_window(387.0, 330.0, window=merah_glass_1)
# GM1
button_data = {"id": "p1", "status": "kosong", "warna": "merah"}
# Store all data as attributes
merah_glass_1.id = button_data["id"]
merah_glass_1.status = button_data["status"]
merah_glass_1.warna = button_data["warna"]

merah_glass_2 = Button(
    image=button_image_34,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(merah_glass_2, "cup")
)
merah_glass_2.place(
    width=157.0,
    height=155.0
)
gm2 = canvas.create_window(563.0, 330.0, window=merah_glass_2)
# GM2
button_data = {"id": "p2", "status": "kosong", "warna": "merah"}
# Store all data as attributes
merah_glass_2.id = button_data["id"]
merah_glass_2.status = button_data["status"]
merah_glass_2.warna = button_data["warna"]

merah_glass_3 = Button(
    image=button_image_34,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(merah_glass_3, "cup")
)
merah_glass_3.place(
    width=157.0,
    height=155.0
)
gm3 = canvas.create_window(738.0, 330.0, window=merah_glass_3)
# GM3
button_data = {"id": "p3", "status": "kosong", "warna": "merah"}
# Store all data as attributes
merah_glass_3.id = button_data["id"]
merah_glass_3.status = button_data["status"]
merah_glass_3.warna = button_data["warna"]

merah_glass_4 = Button(
    image=button_image_34,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(merah_glass_4, "cup")
)
merah_glass_4.place(
    width=157.0,
    height=155.0
)
gm4 = canvas.create_window(387.0, 507.0, window=merah_glass_4)
# GM4
button_data = {"id": "p4", "status": "kosong", "warna": "merah"}
# Store all data as attributes
merah_glass_4.id = button_data["id"]
merah_glass_4.status = button_data["status"]
merah_glass_4.warna = button_data["warna"]

merah_glass_5 = Button(
    image=button_image_34,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(merah_glass_5, "cup")
)
merah_glass_5.place(
    width=157.0,
    height=155.0
)
gm5 = canvas.create_window(563.0, 507.0, window=merah_glass_5)
# GM5
button_data = {"id": "p5", "status": "kosong", "warna": "merah"}
# Store all data as attributes
merah_glass_5.id = button_data["id"]
merah_glass_5.status = button_data["status"]
merah_glass_5.warna = button_data["warna"]

merah_glass_6 = Button(
    image=button_image_34,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(merah_glass_6, "cup")
)
merah_glass_6.place(
    width=157.0,
    height=155.0
)
gm6 = canvas.create_window(738.0, 507.0, window=merah_glass_6)
# GM6
button_data = {"id": "p6", "status": "kosong", "warna": "merah"}
# Store all data as attributes
merah_glass_6.id = button_data["id"]
merah_glass_6.status = button_data["status"]
merah_glass_6.warna = button_data["warna"]

merah_glass_7 = Button(
    image=button_image_34,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(merah_glass_7, "cup")
)
merah_glass_7.place(
    width=157.0,
    height=155.0
)
gm7 = canvas.create_window(387.0, 684.0, window=merah_glass_7)
# GM7
button_data = {"id": "p7", "status": "kosong", "warna": "merah"}
# Store all data as attributes
merah_glass_7.id = button_data["id"]
merah_glass_7.status = button_data["status"]
merah_glass_7.warna = button_data["warna"]

merah_glass_8 = Button(
    image=button_image_34,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(merah_glass_8, "cup")
)
merah_glass_8.place(
    width=157.0,
    height=155.0
)
gm8 = canvas.create_window(563.0, 684.0, window=merah_glass_8)
# GM8
button_data = {"id": "p8", "status": "kosong", "warna": "merah"}
# Store all data as attributes
merah_glass_8.id = button_data["id"]
merah_glass_8.status = button_data["status"]
merah_glass_8.warna = button_data["warna"]

merah_glass_9 = Button(
    image=button_image_34,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(merah_glass_9, "cup")
)
merah_glass_9.place(
    width=157.0,
    height=155.0
)
gm9 = canvas.create_window(738.0, 684.0, window=merah_glass_9)
# GM9
button_data = {"id": "p9", "status": "kosong", "warna": "merah"}
# Store all data as attributes
merah_glass_9.id = button_data["id"]
merah_glass_9.status = button_data["status"]
merah_glass_9.warna = button_data["warna"]

############################# CAT HEADS #################################

# image_image_32 = PhotoImage(
#     file=relative_to_assets("image_32.png"))
# white_head = canvas.create_image(
#     387.0,
#     330.0,
#     image=image_image_32,
#     tags=("cat_head","white_head")
# )

# image_image_33 = PhotoImage(
#     file=relative_to_assets("image_33.png"))
# blue_head = canvas.create_image(
#     344.0,
#     100.0,
#     image=image_image_33,
#     tags=("cat_head","blue_head")
# )

# image_image_34 = PhotoImage(
#     file=relative_to_assets("image_34.png"))
# red_head = canvas.create_image(
#     223.0,
#     100.0,
#     image=image_image_34,
#     tags=("cat_head","red_head")
# )

############################################## BUTTONS #############################################

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
draw_button = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("draw_button clicked"),
    relief="flat"
)
draw_button.place(
    x=476.0,
    y=324.0,
    width=569.0,
    height=169.0
)
draw_button_id = canvas.create_window(476, 324, window=draw_button)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
lose_button = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("lose_button clicked"),
    relief="flat"
)
lose_button.place(
    x=476.0,
    y=324.0,
    width=564.0,
    height=169.0
)
lose_button_id = canvas.create_window(476, 324, window=lose_button)

button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
win_button = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("win_button clicked"),
    relief="flat"
)
win_button.place(
    x=476.0,
    y=324.0,
    width=566.0,
    height=169.0
)
win_button_id = canvas.create_window(476, 324, window=win_button)

button_image_4 = PhotoImage(
    file=relative_to_assets("button_4.png"))
start_button = Button(
    image=button_image_4,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: show_all_elements(),
    relief="flat"
)
start_button.place(
    x=736.0,
    y=574.0,
    width=570.0,
    height=169.0
)
# 736.0,
# 324.0,
start_button_id = canvas.create_window(736, 574, window=start_button)

####################################### COLORED NUMBER CUPS #########################################
image_references = {}
image_image_52 = PhotoImage(
    file=relative_to_assets("image_52.png"))
image_references["biru_cup_6"] = image_image_52
biru_cup_6 = canvas.create_image(
    1271.420654296875,
    401.0,
    image=image_image_52,
    tags=("colored_cup", "biru", "6")
)

image_image_53 = PhotoImage(
    file=relative_to_assets("image_53.png"))
image_references["biru_cup_1"] = image_image_53
biru_cup_1 = canvas.create_image(
    251.0,
    401.0,
    image=image_image_53,
    tags=("colored_cup", "biru", "1")
)

image_image_54 = PhotoImage(
    file=relative_to_assets("image_54.png"))
image_references["biru_cup_2"] = image_image_54
biru_cup_2 = canvas.create_image(
    506.10498046875,
    401.0,
    image=image_image_54,
    tags=("colored_cup", "biru", "2")
)

image_image_55 = PhotoImage(
    file=relative_to_assets("image_55.png"))
image_references["biru_cup_3"] = image_image_55
biru_cup_3 = canvas.create_image(
    761.210205078125,
    401.0,
    image=image_image_55,
    tags=("colored_cup", "biru", "3")
)

image_image_56 = PhotoImage(
    file=relative_to_assets("image_56.png"))
image_references["biru_cup_4"] = image_image_56
biru_cup_4 = canvas.create_image(
    1016.3154296875,
    401.0,
    image=image_image_56,
    tags=("colored_cup", "biru", "4")
)

image_image_57 = PhotoImage(
    file=relative_to_assets("image_57.png"))
image_references["merah_cup_2"] = image_image_57
merah_cup_2 = canvas.create_image(
    506.10498046875,
    588.0,
    image=image_image_57,
    tags=("colored_cup", "merah", "2")
)

image_image_58 = PhotoImage(
    file=relative_to_assets("image_58.png"))
image_references["merah_cup_3"] = image_image_58
merah_cup_3 = canvas.create_image(
    761.210205078125,
    588.0,
    image=image_image_58,
    tags=("colored_cup", "merah", "3")
)

image_image_59 = PhotoImage(
    file=relative_to_assets("image_59.png"))
image_references["merah_cup_4"] = image_image_59
merah_cup_4 = canvas.create_image(
    1021.39208984375,
    588.0,
    image=image_image_59,
    tags=("colored_cup", "merah", "4")
)

image_image_60 = PhotoImage(
    file=relative_to_assets("image_60.png"))
image_references["merah_cup_6"] = image_image_60
merah_cup_6 = canvas.create_image(
    1271.420654296875,
    588.0,
    image=image_image_60,
    tags=("colored_cup", "merah", "6")
)

image_image_61 = PhotoImage(
    file=relative_to_assets("image_61.png"))
image_references["merah_cup_1"] = image_image_61
merah_cup_1 = canvas.create_image(
    251.0,
    588.0,
    image=image_image_61,
    tags=("colored_cup", "merah", "1")
)

image_image_62 = PhotoImage(
    file=relative_to_assets("image_62.png"))
image_references["putih_cup_6"] = image_image_62
putih_cup_6 = canvas.create_image(
    1271.420654296875,
    775.0,
    image=image_image_62,
    tags=("colored_cup", "putih", "6")
)

image_image_63 = PhotoImage(
    file=relative_to_assets("image_63.png"))
image_references["putih_cup_1"] = image_image_63
putih_cup_1 = canvas.create_image(
    251.0,
    775.0,
    image=image_image_63,
    tags=("colored_cup", "putih", "1")
)

image_image_64 = PhotoImage(
    file=relative_to_assets("image_64.png"))
image_references["putih_cup_2"] = image_image_64
putih_cup_2 = canvas.create_image(
    506.10498046875,
    775.0,
    image=image_image_64,
    tags=("colored_cup", "putih", "2")
)

image_image_65 = PhotoImage(
    file=relative_to_assets("image_65.png"))
image_references["putih_cup_3"] = image_image_65
putih_cup_3 = canvas.create_image(
    763.74853515625,
    775.0,
    image=image_image_65,
    tags=("colored_cup", "putih", "3")
)

image_image_66 = PhotoImage(
    file=relative_to_assets("image_66.png"))
image_references["putih_cup_4"] = image_image_66
putih_cup_4 = canvas.create_image(
    1021.39208984375,
    775.0,
    image=image_image_66,
    tags=("colored_cup", "putih", "4")
)

image_win = PhotoImage(file=relative_to_assets("button_3.png"))
you_win_image_id = canvas.create_image(
    720.0, 512.0,
    image=image_win,
    state="hidden",
    tags=("you_win_image",)
)

image_draw = PhotoImage(file=relative_to_assets("button_2.png"))
you_draw_image_id = canvas.create_image(
    720.0, 512.0,
    image=image_draw,
    state="hidden",
    tags=("you_draw_image",)
)

image_lose = PhotoImage(file=relative_to_assets("button_1.png"))
you_lose_image_id = canvas.create_image(
    720.0, 512.0,
    image=image_lose,
    state="hidden",
    tags=("you_lose_image",)
)


################################################### FUNCTIONS ######################################
#################
### VARIABLES ###
#################
button_x_pos = 476.0
button_y_pos = 324.0

card_id = [
    {"id": "kp1", "warna": "putih", "angka": 1},
    {"id": "kp2", "warna": "putih", "angka": 2},
    {"id": "kp3", "warna": "putih", "angka": 3},
    {"id": "kb1", "warna": "biru", "angka": 1},
    {"id": "kb2", "warna": "biru", "angka": 2},
    {"id": "kb3", "warna": "biru", "angka": 3},
    {"id": "km1", "warna": "merah", "angka": 1},
    {"id": "km2", "warna": "merah", "angka": 2},
    {"id": "km3", "warna": "merah", "angka": 3}
]

cup_id = [
    {"id": "p1", "status": "kosong", "warna": "putih"},
    {"id": "p2", "status": "kosong", "warna": "putih"},
    {"id": "p3", "status": "kosong", "warna": "putih"},
    {"id": "p4", "status": "kosong", "warna": "putih"},
    {"id": "p5", "status": "kosong", "warna": "putih"},
    {"id": "p6", "status": "kosong", "warna": "putih"},
    {"id": "p7", "status": "kosong", "warna": "putih"},
    {"id": "p8", "status": "kosong", "warna": "putih"},
    {"id": "p9", "status": "kosong", "warna": "putih"}
]

colored_cup_id = [
    {"id": "p1", "status": "kosong", "warna": "biru"},
    {"id": "p2", "status": "kosong", "warna": "biru"},
    {"id": "p3", "status": "kosong", "warna": "biru"},
    {"id": "p4", "status": "kosong", "warna": "biru"},
    {"id": "p5", "status": "kosong", "warna": "biru"},
    {"id": "p6", "status": "kosong", "warna": "biru"},
    {"id": "p7", "status": "kosong", "warna": "biru"},
    {"id": "p8", "status": "kosong", "warna": "biru"},
    {"id": "p9", "status": "kosong", "warna": "biru"},
    {"id": "p1", "status": "kosong", "warna": "merah"},
    {"id": "p2", "status": "kosong", "warna": "merah"},
    {"id": "p3", "status": "kosong", "warna": "merah"},
    {"id": "p4", "status": "kosong", "warna": "merah"},
    {"id": "p5", "status": "kosong", "warna": "merah"},
    {"id": "p6", "status": "kosong", "warna": "merah"},
    {"id": "p7", "status": "kosong", "warna": "merah"},
    {"id": "p8", "status": "kosong", "warna": "merah"},
    {"id": "p9", "status": "kosong", "warna": "merah"}
]


def hide_all_except_start():
    canvas.itemconfig("default_main_area", state='hidden')
    canvas.itemconfig("score_area", state='hidden')
    canvas.itemconfig("card_area", state='hidden')
    canvas.itemconfig("back_card", state='hidden')
    canvas.itemconfig("tile", state='hidden')
    canvas.itemconfig("cat_head", state='hidden')
    canvas.itemconfig("title_game", state='hidden')
    canvas.itemconfig("colored_cup", state='hidden')
    canvas.itemconfig(draw_button_id, state="hidden")
    canvas.itemconfig(win_button_id, state="hidden")
    canvas.itemconfig(lose_button_id, state="hidden")
    canvas.itemconfig(his_entry_score_id, state="hidden")
    canvas.itemconfig(her_entry_score_id, state="hidden")
    for i in range(1, 10):
        canvas.itemconfig(globals()[f"gp{i}"], state="hidden")
    for i in range(1, 10):
        canvas.itemconfig(globals()[f"gb{i}"], state="hidden")
    for i in range(1, 10):
        canvas.itemconfig(globals()[f"gm{i}"], state="hidden")
    # ... rest of the hiding logic


def show_all_elements():
    canvas.itemconfig("default_main_area", state='normal')
    canvas.itemconfig("score_area", state='normal')
    canvas.itemconfig("card_area", state='normal')
    canvas.itemconfig("back_card", state='normal')
    canvas.itemconfig("title_game", state='normal')
    canvas.itemconfig("title_start", state='hidden')
    canvas.itemconfig("cat_head", state='normal')
    canvas.itemconfig(his_entry_score_id, state="normal")
    canvas.itemconfig(her_entry_score_id, state="normal")
    canvas.itemconfig(start_button_id, state="hidden")
    # for i in range(1, 10):
    #     canvas.itemconfig(globals()[f"gp{i}"], state="normal")
    select_and_show_random_buttons()
    place_random_buttons()

    # ... rest of the showing logic


# Create containers for all buttons
white_buttons = {}
red_buttons = {}
blue_buttons = {}
red_canvas_ids = {}
blue_canvas_ids = {}
white_canvas_ids = {}
total_score_user = 0
comparison_results_user = []
total_score_kom = 0
comparison_results_kom = []
user_turn_count = 0

# Store buttons and their canvas IDs when creating them
for i in range(1, 10):
    # For red buttons
    red_buttons[i] = globals()[f"merah_glass_{i}"]
    red_canvas_ids[i] = globals()[f"gm{i}"]
    red_buttons[i]._canvas_id = red_canvas_ids[i]

    # For blue buttons
    blue_buttons[i] = globals()[f"biru_glass_{i}"]
    blue_canvas_ids[i] = globals()[f"gb{i}"]
    blue_buttons[i]._canvas_id = blue_canvas_ids[i]

    # For white buttons
    white_buttons[i] = globals()[f"putih_glass_{i}"]
    white_canvas_ids[i] = globals()[f"gp{i}"]
    white_buttons[i]._canvas_id = white_canvas_ids[i]


def select_and_show_random_buttons():
    # First hide all buttons
    all_buttons = list(red_buttons.values()) + list(blue_buttons.values()) + list(white_buttons.values())
    for button in all_buttons:
        if hasattr(button, '_canvas_id'):
            canvas.itemconfig(button._canvas_id, state='hidden')

    # Randomly choose a red:blue ratio for the 3 colored buttons
    red_blue_choice = random.choice([(0, 3), (1, 2), (2, 1), (3, 0)])
    red_count, blue_count = red_blue_choice

    # Create a set to track used IDs
    used_ids = set()
    selected_buttons = []

    # Select colored buttons without duplicate IDs
    # 1. Select red buttons
    if red_count > 0:
        available_reds = [btn for btn in red_buttons.values()
                          if hasattr(btn, '_canvas_id') and btn.id not in used_ids]
        selected_reds = random.sample(available_reds, min(red_count, len(available_reds)))
        selected_buttons.extend(selected_reds)
        used_ids.update(btn.id for btn in selected_reds)

    # 2. Select blue buttons
    if blue_count > 0:
        available_blues = [btn for btn in blue_buttons.values()
                           if hasattr(btn, '_canvas_id') and btn.id not in used_ids]
        selected_blues = random.sample(available_blues, min(blue_count, len(available_blues)))
        selected_buttons.extend(selected_blues)
        used_ids.update(btn.id for btn in selected_blues)

    # 3. Select white buttons (6 remaining) without duplicate IDs
    available_whites = [btn for btn in white_buttons.values()
                        if hasattr(btn, '_canvas_id') and btn.id not in used_ids]
    selected_whites = random.sample(available_whites, min(6, len(available_whites)))
    selected_buttons.extend(selected_whites)
    used_ids.update(btn.id for btn in selected_whites)

    # Show selected buttons (3 colored + 6 white)
    for button in selected_buttons:
        canvas.itemconfig(button._canvas_id, state='normal')

    # Print selection for debugging
    print(f"Selected {len(selected_buttons)} buttons (expected 9)")
    print(f"Colored: {red_count} red, {blue_count} blue")
    print(f"Red IDs: {[btn.id for btn in selected_buttons if hasattr(btn, 'warna') and btn.warna == 'merah']}")
    print(f"Blue IDs: {[btn.id for btn in selected_buttons if hasattr(btn, 'warna') and btn.warna == 'biru']}")
    print(f"White IDs: {[btn.id for btn in selected_buttons if hasattr(btn, 'warna') and btn.warna == 'putih']}")


# def place_random_buttons():
#     # List of all possible buttons
#     global all_buttons, positions, card_in_play
#
#     positions = [
#         (330.0, 762.0),
#         (500.0, 762.0),
#         (670.0, 762.0)]
#
#     positions_kom = [
#         (330.0, 10.0),
#         (500.0, 10.0),
#         (670.0, 10.0)
#     ]
#
#     dict_pos = {"list_pos_1": [kp11, kp21, kp31, kb11, kb21, kb31, km11, km21, km31],
#                 "list_pos_2": [kp12, kp22, kp32, kb12, kb22, kb32, km12, km22, km32],
#                 "list_pos_3": [kp13, kp23, kp33, kb13, kb23, kb33, km13, km23, km33]}
#
#     dict_kom = {"list_pos_1": [buttons_komputer["kpc11"], buttons_komputer["kpc21"], buttons_komputer["kpc31"],
#                                buttons_komputer["kmc11"], buttons_komputer["kmc21"], buttons_komputer["kmc31"],
#                                buttons_komputer["kbc11"], buttons_komputer["kbc21"], buttons_komputer["kbc31"]],
#                 "list_pos_2": [buttons_komputer["kpc12"], buttons_komputer["kpc22"], buttons_komputer["kpc32"],
#                                buttons_komputer["kmc12"], buttons_komputer["kmc22"], buttons_komputer["kmc32"],
#                                buttons_komputer["kbc12"], buttons_komputer["kbc22"], buttons_komputer["kbc32"]],
#                 "list_pos_3": [buttons_komputer["kpc13"], buttons_komputer["kpc23"], buttons_komputer["kpc33"],
#                                buttons_komputer["kmc13"], buttons_komputer["kmc23"], buttons_komputer["kmc33"],
#                                buttons_komputer["kbc13"], buttons_komputer["kbc23"], buttons_komputer["kbc33"]]}
#
#     selected_buttons = []
#     for one_post in positions:
#         if one_post == positions[0]:
#             button_post = dict_pos["list_pos_1"]
#             new_card = random.choice(button_post)
#             selected_buttons.append(new_card)
#         elif one_post == positions[1]:
#             button_post = dict_pos["list_pos_2"]
#             new_card = random.choice(button_post)
#             selected_buttons.append(new_card)
#         else:
#             button_post = dict_pos["list_pos_3"]
#             new_card = random.choice(button_post)
#             selected_buttons.append(new_card)
#
#     # Place selected buttons
#     for i, button in enumerate(selected_buttons):
#         x, y = positions[i]
#         button.place(
#             x=x,
#             y=y,
#             anchor="nw"  # Explicit anchor point
#         )
#         button.lift()  # Bring to front
#         print(f"Placed {button.id} at ({x}, {y})")
#
#
#     #for komputer
#     selected_buttons_kom = []
#     for one_post_kom in positions_kom:
#         if one_post_kom == positions_kom[0]:
#             button_post = dict_kom["list_pos_1"]
#             new_card_kom = random.choice(button_post)
#             selected_buttons_kom.append(new_card_kom)
#         elif one_post_kom == positions_kom[1]:
#             button_post = dict_kom["list_pos_2"]
#             new_card_kom = random.choice(button_post)
#             selected_buttons_kom.append(new_card_kom)
#         else:
#             button_post = dict_kom["list_pos_3"]
#             new_card_kom = random.choice(button_post)
#             selected_buttons_kom.append(new_card_kom)
#
#     # Place selected buttons
#     for i, button in enumerate(selected_buttons_kom):
#         x, y = positions[i]
#         button.place(
#             x=x,
#             y=y,
#             anchor="nw"  # Explicit anchor point
#         )
#         button.lift()  # Bring to front
#         print(f"Placed {button.id} at ({x}, {y})")
#
#     # Force UI update
#     button.master.update()

def place_random_buttons():
    # List of all possible buttons
    # global all_buttons, positions, card_in_play
    # all_buttons = [
    #     kp11, kp12, kp13, kp21, kp22, kp23, kp31, kp32, kp33,
    #     kb11, kb12, kb13, kb21, kb22, kb23, kb31, kb32, kb33,
    #     km11, km12, km13, km21, km22, km23, km31, km32, km33
    # ]

    positions_kom = [
        (330.0, 10.0),
        (500.0, 10.0),
        (670.0, 10.0)
    ]

    positions = [
        (330.0, 762.0),
        (500.0, 762.0),
        (670.0, 762.0)
    ]

    dict_pos = {"list_pos_1": [kp11, kp21, kp31, kb11, kb21, kb31, km11, km21, km31],
                "list_pos_2": [kp12, kp22, kp32, kb12, kb22, kb32, km12, km22, km32],
                "list_pos_3": [kp13, kp23, kp33, kb13, kb23, kb33, km13, km23, km33]}

    dict_kom = {"list_pos_1": [buttons_komputer["kpc11"], buttons_komputer["kpc21"], buttons_komputer["kpc31"], buttons_komputer["kmc11"], buttons_komputer["kmc21"], buttons_komputer["kmc31"], buttons_komputer["kbc11"], buttons_komputer["kbc21"], buttons_komputer["kbc31"]],
                "list_pos_2": [buttons_komputer["kpc12"], buttons_komputer["kpc22"], buttons_komputer["kpc32"], buttons_komputer["kmc12"], buttons_komputer["kmc22"], buttons_komputer["kmc32"], buttons_komputer["kbc12"], buttons_komputer["kbc22"], buttons_komputer["kbc32"]],
                "list_pos_3": [buttons_komputer["kpc13"], buttons_komputer["kpc23"], buttons_komputer["kpc33"], buttons_komputer["kmc13"], buttons_komputer["kmc23"], buttons_komputer["kmc33"], buttons_komputer["kbc13"], buttons_komputer["kbc23"], buttons_komputer["kbc33"]]}

    selected_buttons = []
    for one_post in positions:
        if one_post == positions[0]:
            button_post = dict_pos["list_pos_1"]
            new_card = random.choice(button_post)
            selected_buttons.append(new_card)
        elif one_post == positions[1]:
            button_post = dict_pos["list_pos_2"]
            new_card = random.choice(button_post)
            selected_buttons.append(new_card)
        else:
            button_post = dict_pos["list_pos_3"]
            new_card = random.choice(button_post)
            selected_buttons.append(new_card)

    # Place selected buttons
    for i, button in enumerate(selected_buttons):
        x, y = positions[i]
        button.place(
            x=x,
            y=y,
            # width=155.0,  # Make sure to include dimensions
            # height=153.0,
            anchor="nw"  # Explicit anchor point
        )
        button.lift()  # Bring to front
        print(f"Placed {button.id} at ({x}, {y})")

    # for komputer
    selected_buttons_kom = []
    for one_post_kom in positions_kom:
        if one_post_kom == positions_kom[0]:
            button_post = dict_kom["list_pos_1"]
            new_card_kom = random.choice(button_post)
            selected_buttons_kom.append(new_card_kom)
        elif one_post_kom == positions_kom[1]:
            button_post = dict_kom["list_pos_2"]
            new_card_kom = random.choice(button_post)
            selected_buttons_kom.append(new_card_kom)
        else:
            button_post = dict_kom["list_pos_3"]
            new_card_kom = random.choice(button_post)
            selected_buttons_kom.append(new_card_kom)

    # Place selected buttons
    for i, button in enumerate(selected_buttons_kom):
        x, y = positions_kom[i]
        button.place(
            x=x,
            y=y,
            # width=155.0,  # Make sure to include dimensions
            # height=153.0,
            anchor="nw"  # Explicit anchor point
        )
        button.lift()  # Bring to front
        print(f"Placed {button.id} at ({x}, {y})")

    # Force UI update
    button.master.update()


# Global variables to track button clicks
first_click = None
second_click = None
result = None
turn = "user"

def handle_button_click(button, status_="user"):
    """Handles button clicks and compares two buttons"""
    global first_click, second_click, result, total_score, turn, user_turn_count

    # if status_ != "cup":
    #     if turn != "user":
    #         print("Bukan giliran user.")
    #         return

    # Get button attributes
    if hasattr(button, 'angka'):
        clicked_data = {
            "button_obj": button,  # Store the button object
            "id": button.id,
            "warna": button.warna,
            "angka": button.angka,
            "pos": (button.winfo_x(), button.winfo_y())
        }
        # remove_kartu(button)
    else:
        clicked_data = {
            "button_obj": button,  # Store the button object
            "id": button.id,
            "warna": button.warna,
            "status": button.status
        }

    print(f"Button saved: {clicked_data}")

    # Store clicks
    if first_click is None:
        first_click = clicked_data
        print("First button selected. Click another button to compare.")

        button.config(relief="sunken")
        button.after(200, lambda: button.config(relief="flat"))

    else:
        second_click = clicked_data
        button.config(relief="sunken")
        button.after(200, lambda: button.config(relief="flat"))

        compare_buttons()
        if turn == "user":
            update_my_score_display()
            turn = "komputer"
        else:
            update_my_score_display_kom()
            turn = "user"

        if turn == "komputer":
            user_turn_count += 1
            if user_turn_count >= 5:
                print("Giliran user selesai!")
                check_winner()

        update_image_based_on_selection()
    
        # Remove and replace BOTH cards
        if first_click and 'pos' in first_click:
            remove_and_replace_card(first_click['button_obj'])
        if second_click and 'pos' in second_click:
            remove_and_replace_card(second_click['button_obj'])

        # Reset for next comparison
        first_click = None
        second_click = None

    # Visual feedback
    button.config(relief="sunken")
    button.after(200, lambda: button.config(relief="flat"))

def handle_button_click_kom(button, status_="komputer"):
    """Handles button clicks and compares two buttons"""
    global first_click, second_click, result, total_score, turn
    turn = "komputer"
    
    if turn != "komputer":
        print("Bukan giliran komputer.")
        return
    
    # Get button attributes
    if hasattr(button, 'angka'):
        clicked_data = {
            "button_obj": button,  # Store the button object
            "id": button.id,
            "warna": button.warna,
            "angka": button.angka,
            "pos": (button.winfo_x(), button.winfo_y())
        }
        # remove_kartu(button)
    else:
        clicked_data = {
            "button_obj": button,  # Store the button object
            "id": button.id,
            "warna": button.warna,
            "status": button.status
        }

    print(f"[KOM] Button saved: {clicked_data}")

    # Store clicks
    if first_click is None:
        first_click = clicked_data
        print("First button selected. Click another button to compare.")

        button.config(relief="sunken")
        button.after(200, lambda: button.config(relief="flat"))

    else:
        second_click = clicked_data
        button.config(relief="sunken")
        button.after(200, lambda: button.config(relief="flat"))

        compare_buttons()
        update_my_score_display_kom()
        update_image_based_on_selection()

        # Remove and replace BOTH cards
        if first_click and 'pos' in first_click:
            remove_and_replace_card(first_click['button_obj'])
        if second_click and 'pos' in second_click:
            remove_and_replace_card(second_click['button_obj'])

        # Reset for next comparison
        first_click = None
        second_click = None
        turn = "user"

    # Visual feedback
    button.config(relief="sunken")
    button.after(200, lambda: button.config(relief="flat"))

def remove_and_replace_card(button):
    """Handles complete card removal and replacement"""
    pos = get_button_position(button)
    if pos:
        remove_kartu(button)
        ambil_kartu(pos)


def get_button_position(button):
    """Returns the position slot the button occupies"""
    card_positions = [
        (330.0, 762.0),  # Position 1
        (500.0, 762.0),  # Position 2
        (670.0, 762.0)  # Position 3
    ]

    button_pos = (button.winfo_x(), button.winfo_y())
    for pos in card_positions:
        if (abs(button_pos[0] - pos[0]) < 10 and
                abs(button_pos[1] - pos[1]) < 10):
            return pos
    return None


# Keep your existing remove_kartu and ambil_kartu functions
def remove_kartu(button):
    button.place_forget()
    print(f"Removed card {button.id}")


def ambil_kartu(pos):
    """Draws a new random card at position"""
    card_groups = {
        (330.0, 762.0): [kp11, kp21, kp31, kb11, kb21, kb31, km11, km21, km31],
        (500.0, 762.0): [kp12, kp22, kp32, kb12, kb22, kb32, km12, km22, km32],
        (670.0, 762.0): [kp13, kp23, kp33, kb13, kb23, kb33, km13, km23, km33],
        (330.0, 10.0): [buttons_komputer["kpc11"], buttons_komputer["kpc21"], buttons_komputer["kpc31"],
                        buttons_komputer["kmc11"], buttons_komputer["kmc21"], buttons_komputer["kmc31"],
                        buttons_komputer["kbc11"], buttons_komputer["kbc21"], buttons_komputer["kbc31"]],
        (500.0, 10.0): [buttons_komputer["kpc12"], buttons_komputer["kpc22"], buttons_komputer["kpc32"],
                    buttons_komputer["kmc12"], buttons_komputer["kmc22"], buttons_komputer["kmc32"],
                    buttons_komputer["kbc12"], buttons_komputer["kbc22"], buttons_komputer["kbc32"]],
        (670.0, 10.0): [buttons_komputer["kpc13"], buttons_komputer["kpc23"], buttons_komputer["kpc33"],
                    buttons_komputer["kmc13"], buttons_komputer["kmc23"], buttons_komputer["kmc33"],
                    buttons_komputer["kbc13"], buttons_komputer["kbc23"], buttons_komputer["kbc33"]]
    }

    if pos in card_groups:
        new_card = random.choice(card_groups[pos])
        new_card.place(x=pos[0], y=pos[1], anchor="nw")
        new_card.lift()
        print(f"New card {new_card.id} at position {pos}")


def update_my_score_display():
    her_entry_score.config(state="normal")  # Ubah jadi normal dulu
    her_entry_score.delete(0, "end")  # Kosongkan
    her_entry_score.insert(0, str(total_score_user))  # Masukkan nilai terbaru
    her_entry_score.config(state="readonly")  # Lock lagi supaya tidak bisa diedit

def update_my_score_display_kom():
    his_entry_score.config(state="normal")  # Ubah jadi normal dulu
    his_entry_score.delete(0, "end")  # Kosongkan
    his_entry_score.insert(0, str(total_score_kom))  # Masukkan nilai terbaru
    his_entry_score.config(state="readonly")  # Lock lagi supaya tidak bisa diedit

# At the top of your script (global scope)
comparison_results = [] 
latest_result = None  # Stores the most recent result
total_score = 0  # Stores running total score


def compare_buttons():
    global total_score_user,total_score_kom, comparison_results, first_click, second_click, result, latest_result

    # Reset score before recalculating
    total_score = 0

    # Determine which button has angka (number)
    angka_button = first_click if 'angka' in first_click else second_click
    other_button = second_click if angka_button == first_click else first_click

    # Rule 1: If either button is 'putih', angka stays the same
    if first_click['warna'] == 'putih' or second_click['warna'] == 'putih':
        result = angka_button['angka']
        print(f"Result (white rule): {result}")

    # Rule 2: If colors match (both 'biru' or both 'merah')
    elif first_click['warna'] == second_click['warna']:
        result = angka_button['angka'] * 2
        print(f"Result (color match): {result}")

    # NEW RULE 3: Red and blue combination
    elif (first_click['warna'] == 'merah' and second_click['warna'] == 'biru') or \
            (first_click['warna'] == 'biru' and second_click['warna'] == 'merah'):
        result = 1
        print(f"Result (red-blue combination): {result}")

    else:
        result = None
        print("No matching rule applies")

    # Update score tracking
    latest_result = result
    comparison_results.append(result)

    # Calculate total score
    if result is not None:
        if turn == "user":
            comparison_results_user.append(result)
            total_score_user += result
            update_my_score_display()
        elif turn == "komputer":
            comparison_results_kom.append(result)
            total_score_kom += result
            update_my_score_display_kom()

    print(f"Result dari compare_buttons: {result}")
    return result, latest_result

def show_end_screen(status: str):
    # Sembunyikan semua elemen canvas
    canvas.itemconfig("default_main_area", state='hidden')
    canvas.itemconfig("score_area", state='hidden')
    canvas.itemconfig("card_area", state='hidden')
    canvas.itemconfig("back_card", state='hidden')
    canvas.itemconfig("tile", state='hidden')
    canvas.itemconfig("cat_head", state='hidden')
    canvas.itemconfig("colored_cup", state='hidden')
    canvas.itemconfig(his_entry_score_id, state="hidden")
    canvas.itemconfig(her_entry_score_id, state="hidden")

    # Sembunyikan semua gelas di canvas
    for i in range(1, 10):
        canvas.itemconfig(globals()[f"gp{i}"], state="hidden")
        canvas.itemconfig(globals()[f"gb{i}"], state="hidden")
        canvas.itemconfig(globals()[f"gm{i}"], state="hidden")

    # Tampilkan logo dan latar
    canvas.itemconfig("title_game", state='normal')
    canvas.itemconfig("title_start", state='normal')  # opsional

    # Sembunyikan tombol start
    canvas.itemconfig(start_button_id, state='hidden')

    # Sembunyikan semua tombol kartu user
    all_user_cards = [
        kp11, kp12, kp13, kp21, kp22, kp23, kp31, kp32, kp33,
        kb11, kb12, kb13, kb21, kb22, kb23, kb31, kb32, kb33,
        km11, km12, km13, km21, km22, km23, km31, km32, km33
    ]
    for btn in all_user_cards:
        try:
            btn.place_forget()
        except:
            pass

    # Sembunyikan semua tombol kartu komputer
    for btn in buttons_komputer.values():
        try:
            btn.place_forget()
        except:
            pass

    # Sembunyikan semua tombol akhir
    canvas.itemconfig(win_button_id, state='hidden')
    canvas.itemconfig(draw_button_id, state='hidden')
    canvas.itemconfig(lose_button_id, state='hidden')

    # Tampilkan hanya tombol hasil akhir sesuai status
    if status == "win":
        canvas.itemconfig(win_button_id, state='normal')
    elif status == "draw":
        canvas.itemconfig(draw_button_id, state='normal')
    elif status == "lose":
        canvas.itemconfig(lose_button_id, state='normal')


    
def check_winner():
    if total_score_user > total_score_kom:
        show_end_screen("win")
    elif total_score_user < total_score_kom:
        show_end_screen("lose")
    else:
        show_end_screen("draw")




def update_image_based_on_selection():
    global first_click, second_click, canvas, image_references, latest_result

    # Validation checks
    if not (first_click and second_click):
        return
    if 'angka' not in first_click or 'warna' not in second_click:
        return
    if latest_result is None:  # Skip if no valid result from comparison
        return

    angka = str(latest_result)
    warna = second_click['warna']
    button = second_click['button_obj']

    # Get the image reference
    image_key = f"{warna}_cup_{angka}"
    if image_key not in image_references:
        print(f"Error: No image found for {image_key}")
        return

    # Get button position (center)
    button_x = button.winfo_rootx() + button.winfo_width() // 2
    button_y = button.winfo_rooty() + button.winfo_height() // 2

    # Convert to canvas coordinates
    canvas_x = canvas.canvasx(button_x)
    canvas_y = canvas.canvasy(button_y)

    # COMPLETELY REMOVE THE BUTTON
    if hasattr(button, '_canvas_id'):
        canvas.delete(button._canvas_id)  # Remove from canvas
    button.destroy()  # Completely destroy the widget

    # Create new image at the button's former position
    new_image = canvas.create_image(
        canvas_x,
        canvas_y - 25,
        image=image_references[image_key],
        tags=("colored_cup", warna, angka, f"replaced_{button.id}")
    )

    # Store reference
    if not hasattr(canvas, 'replaced_images'):
        canvas.replaced_images = []
    canvas.replaced_images.append(new_image)

    # Update UI
    canvas.update_idletasks()


################################################### ALUR ###########################################
hide_all_except_start()
start_button = Button(command=lambda: show_all_elements())

canvas.move("all", 0, -50)
root.resizable(True, True)
root.mainloop()
