# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

import random
import time
from pathlib import Path

# from tkinter import *
import sys
import os
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, TclError

def resource_path(relative_path):
    try:
        base_path = sys._MEIPASS
    except AttributeError:
        base_path = os.path.abspath(".")
    return os.path.join(base_path, relative_path)

def relative_to_assets(path: str) -> str:
    return resource_path(os.path.join("build", "assets", "frame0", path))

# Explicit imports to satisfy Flake8

OUTPUT_PATH = Path(__file__).parent

root = Tk()

root.title("Kitty Cup")
# root.iconbitmap(r"./build/assets/hb.ico")
root.iconbitmap(resource_path("build/assets/hb.ico"))
screen_width = root.winfo_screenwidth()
screen_height = root.winfo_screenheight()
root.geometry(f"{screen_width}x{screen_height}")
root.attributes("-fullscreen", True)
root.bind("<Escape>", lambda event: root.attributes("-fullscreen", False))
root.configure(bg="#F2EFED")

canvas = Canvas(
    root,
    bg="#F2EFED",
    height=1024,
    width=1440,
    bd=0,
    highlightthickness=0,
    relief="ridge"
)

canvas.place(x=0, y=0)
image_references = {}

############################# MAIN AREA #################################
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
main_area = canvas.create_image(
    561.0,
    512.0,
    image=image_image_1,
    tags=("default_main_area")
)

image_image_10 = PhotoImage(
    file=relative_to_assets("image_10.png"))
tile1 = canvas.create_image(
    386.0,
    336.0,
    image=image_image_10,
    tags=("default_main_area", "p1")
)

image_image_9 = PhotoImage(
    file=relative_to_assets("image_9.png"))
tile2 = canvas.create_image(
    562.0,
    336.0,
    image=image_image_9,
    tags=("default_main_area", "p2")
)

image_image_8 = PhotoImage(
    file=relative_to_assets("image_8.png"))
tile3 = canvas.create_image(
    736.5,
    336.0,
    image=image_image_8,
    tags=("default_main_area", "p3")
)

image_image_7 = PhotoImage(
    file=relative_to_assets("image_7.png"))
tile4 = canvas.create_image(
    386.0,
    513.0,
    image=image_image_7,
    tags=("default_main_area", "p4")
)

image_image_6 = PhotoImage(
    file=relative_to_assets("image_6.png"))
tile5 = canvas.create_image(
    562.0,
    513.0,
    image=image_image_6,
    tags=("default_main_area", "p5")
)

image_image_5 = PhotoImage(
    file=relative_to_assets("image_5.png"))
tile6 = canvas.create_image(
    736.5,
    513.0,
    image=image_image_5,
    tags=("default_main_area", "p6")
)

image_image_4 = PhotoImage(
    file=relative_to_assets("image_4.png"))
tile7 = canvas.create_image(
    386.0,
    690.0,
    image=image_image_4,
    tags=("default_main_area", "p7")
)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
tile8 = canvas.create_image(
    562.0,
    690.0,
    image=image_image_3,
    tags=("default_main_area", "p8")
)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
tile9 = canvas.create_image(
    736.5,
    690.0,
    image=image_image_2,
    tags=("default_main_area", "p9")
)

############################# SCORE AREA #################################
image_image_11 = PhotoImage(
    file=relative_to_assets("image_11.png"))
my_score = canvas.create_image(
    1055.5,
    699.0,
    image=image_image_11,
    tags=("score_area")
)

image_image_12 = PhotoImage(
    file=relative_to_assets("image_12.png"))
his_score = canvas.create_image(
    1055.0,
    599.0,
    image=image_image_12,
    tags=("score_area")
)

entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_1.png"))
entry_bg_1 = canvas.create_image(
    1120.0,
    599.5,
    image=entry_image_1,
    tags=("score_area")
)
his_entry_score = Entry(
    bd=0,
    # bg="#D7DEF0",
    readonlybackground="#d7def0",
    fg="#004AAD",
    font=("Comic Sans MS", 25, "bold"),
    highlightthickness=0,
    state="normal"
)

his_entry_score_id = canvas.create_window(
    1105, 600.0, window=his_entry_score
)

canvas.itemconfig(his_entry_score_id, width=50, height=30)
# his_entry_score.insert(0, "10")
his_entry_score.config(state="readonly")

entry_image_2 = PhotoImage(
    file=relative_to_assets("entry_2.png"))
her_entry_score = canvas.create_image(
    1105.0,
    699.5,
    image=entry_image_2,
    tags=("score_area")
)
her_entry_score = Entry(
    bd=0,
    # bg="#FBDFEF",
    readonlybackground="#fbdfef",
    fg="#F2649E",
    font=("Comic Sans MS", 25, "bold"),
    highlightthickness=0,
    state="normal"

)
her_entry_score_id = canvas.create_window(
    1090, 700.0, window=her_entry_score
)

canvas.itemconfig(her_entry_score_id, width=50, height=30)
# her_entry_score.insert(0, "10")

her_entry_score.config(state="readonly")

############################# CARD AREA #################################

image_image_13 = PhotoImage(
    file=relative_to_assets("image_13.png"))
mca1 = canvas.create_image(
    388.0,
    892.0,
    image=image_image_13,
    tags=("card_area")
)

mca2 = canvas.create_image(
    727.0,
    892.0,
    image=image_image_13,
    tags=("card_area")
)

mca3 = canvas.create_image(
    558.0,
    892.0,
    image=image_image_13,
    tags=("card_area")
)

hca1 = canvas.create_image(
    388.0,
    142.0,
    image=image_image_13,
    tags=("card_area")
)

hca2 = canvas.create_image(
    558.0,
    142.0,
    image=image_image_13,
    tags=("card_area")
)

hca3 = canvas.create_image(
    728.0,
    142.0,
    image=image_image_13,
    tags=("card_area")
)

image_back_card = PhotoImage(
    file=relative_to_assets("image_68.png"))
hc1 = canvas.create_image(
    388.0,
    142.0,
    image=image_back_card,
    tags=("card_area", "back_card")
)

hc2 = canvas.create_image(
    558.0,
    142.0,
    image=image_back_card,
    tags=("card_area", "back_card")
)

hc3 = canvas.create_image(
    728.0,
    142.0,
    image=image_back_card,
    tags=("card_area", "back_card_last")
)

############################# CARD BUTTON #################################
button_image_31 = PhotoImage(
    file=relative_to_assets("button_31.png"))
kp11 = Button(
    image=button_image_31,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(kp11)
)
button_data = {"id": "kp11", "warna": "putih", "angka": 1}
# Store all data as attributes
kp11.id = button_data["id"]
kp11.warna = button_data["warna"]
kp11.angka = button_data["angka"]

kp12 = Button(
    image=button_image_31,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(kp12)
)
button_data = {"id": "kp12", "warna": "putih", "angka": 1}
# Store all data as attributes
kp12.id = button_data["id"]
kp12.warna = button_data["warna"]
kp12.angka = button_data["angka"]

kp13 = Button(
    image=button_image_31,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(kp13)
)
button_data = {"id": "kp13", "warna": "putih", "angka": 1}
# Store all data as attributes
kp13.id = button_data["id"]
kp13.warna = button_data["warna"]
kp13.angka = button_data["angka"]

button_image_32 = PhotoImage(
    file=relative_to_assets("button_32.png"))
kp21 = Button(
    image=button_image_32,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(kp21)
)
button_data = {"id": "kp21", "warna": "putih", "angka": 2}
# Store all data as attributes
kp21.id = button_data["id"]
kp21.warna = button_data["warna"]
kp21.angka = button_data["angka"]

kp22 = Button(
    image=button_image_32,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(kp22)
)
button_data = {"id": "kp22", "warna": "putih", "angka": 2}
# Store all data as attributes
kp22.id = button_data["id"]
kp22.warna = button_data["warna"]
kp22.angka = button_data["angka"]

kp23 = Button(
    image=button_image_32,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(kp23)
)
button_data = {"id": "kp23", "warna": "putih", "angka": 2}
# Store all data as attributes
kp23.id = button_data["id"]
kp23.warna = button_data["warna"]
kp23.angka = button_data["angka"]

button_image_30 = PhotoImage(
    file=relative_to_assets("button_30.png"))
kp31 = Button(
    image=button_image_30,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(kp31)
)
button_data = {"id": "kp31", "warna": "putih", "angka": 3}
# Store all data as attributes
kp31.id = button_data["id"]
kp31.warna = button_data["warna"]
kp31.angka = button_data["angka"]

kp32 = Button(
    image=button_image_30,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(kp32)
)
button_data = {"id": "kp32", "warna": "putih", "angka": 3}
# Store all data as attributes
kp32.id = button_data["id"]
kp32.warna = button_data["warna"]
kp32.angka = button_data["angka"]

kp33 = Button(
    image=button_image_30,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(kp33)
)
button_data = {"id": "kp33", "warna": "putih", "angka": 3}
# Store all data as attributes
kp33.id = button_data["id"]
kp33.warna = button_data["warna"]
kp33.angka = button_data["angka"]

button_image_20 = PhotoImage(
    file=relative_to_assets("button_20.png"))
kb11 = Button(
    image=button_image_20,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(kb11)
)
button_data = {"id": "kb11", "warna": "biru", "angka": 1}
# Store all data as attributes
kb11.id = button_data["id"]
kb11.warna = button_data["warna"]
kb11.angka = button_data["angka"]

kb12 = Button(
    image=button_image_20,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(kb12)
)
button_data = {"id": "kb12", "warna": "biru", "angka": 1}
# Store all data as attributes
kb12.id = button_data["id"]
kb12.warna = button_data["warna"]
kb12.angka = button_data["angka"]

kb13 = Button(
    image=button_image_20,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(kb13)
)
button_data = {"id": "kb13", "warna": "biru", "angka": 1}
# Store all data as attributes
kb13.id = button_data["id"]
kb13.warna = button_data["warna"]
kb13.angka = button_data["angka"]

button_image_21 = PhotoImage(
    file=relative_to_assets("button_21.png"))
kb21 = Button(
    image=button_image_21,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(kb21)
)
button_data = {"id": "kb21", "warna": "biru", "angka": 2}
# Store all data as attributes
kb21.id = button_data["id"]
kb21.warna = button_data["warna"]
kb21.angka = button_data["angka"]

kb22 = Button(
    image=button_image_21,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(kb22)
)
button_data = {"id": "kb22", "warna": "biru", "angka": 2}
# Store all data as attributes
kb22.id = button_data["id"]
kb22.warna = button_data["warna"]
kb22.angka = button_data["angka"]

kb23 = Button(
    image=button_image_21,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(kb23)
)
button_data = {"id": "kb23", "warna": "biru", "angka": 2}
# Store all data as attributes
kb23.id = button_data["id"]
kb23.warna = button_data["warna"]
kb23.angka = button_data["angka"]

button_image_22 = PhotoImage(
    file=relative_to_assets("button_22.png"))
kb31 = Button(
    image=button_image_22,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(kb31)
)
button_data = {"id": "kb31", "warna": "biru", "angka": 3}
# Store all data as attributes
kb31.id = button_data["id"]
kb31.warna = button_data["warna"]
kb31.angka = button_data["angka"]

kb32 = Button(
    image=button_image_22,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(kb32)
)
button_data = {"id": "kb32", "warna": "biru", "angka": 3}
# Store all data as attributes
kb32.id = button_data["id"]
kb32.warna = button_data["warna"]
kb32.angka = button_data["angka"]

kb33 = Button(
    image=button_image_22,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(kb33)
)
button_data = {"id": "kb33", "warna": "biru", "angka": 3}
# Store all data as attributes
kb33.id = button_data["id"]
kb33.warna = button_data["warna"]
kb33.angka = button_data["angka"]

# Button_24
button_image_24 = PhotoImage(
    file=relative_to_assets("button_24.png"))
km11 = Button(
    image=button_image_24,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(km11)
)
button_data = {"id": "km11", "warna": "merah", "angka": 1}
# Store all data as attributes
km11.id = button_data["id"]
km11.warna = button_data["warna"]
km11.angka = button_data["angka"]

km12 = Button(
    image=button_image_24,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(km12)
)
button_data = {"id": "km12", "warna": "merah", "angka": 1}
# Store all data as attributes
km12.id = button_data["id"]
km12.warna = button_data["warna"]
km12.angka = button_data["angka"]

km13 = Button(
    image=button_image_24,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(km13)
)
button_data = {"id": "km13", "warna": "merah", "angka": 1}
# Store all data as attributes
km13.id = button_data["id"]
km13.warna = button_data["warna"]
km13.angka = button_data["angka"]

# Button_25
button_image_25 = PhotoImage(
    file=relative_to_assets("button_25.png"))
km21 = Button(
    image=button_image_25,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(km21)
)
button_data = {"id": "km21", "warna": "merah", "angka": 2}
# Store all data as attributes
km21.id = button_data["id"]
km21.warna = button_data["warna"]
km21.angka = button_data["angka"]

km22 = Button(
    image=button_image_25,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(km22)
)
button_data = {"id": "km22", "warna": "merah", "angka": 2}
# Store all data as attributes
km22.id = button_data["id"]
km22.warna = button_data["warna"]
km22.angka = button_data["angka"]

km23 = Button(
    image=button_image_25,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(km23)
)
button_data = {"id": "km23", "warna": "merah", "angka": 2}
# Store all data as attributes
km23.id = button_data["id"]
km23.warna = button_data["warna"]
km23.angka = button_data["angka"]

# Button_26
button_image_26 = PhotoImage(
    file=relative_to_assets("button_26.png"))
km31 = Button(
    image=button_image_26,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(km31)
)
button_data = {"id": "km31", "warna": "merah", "angka": 3}
# Store all data as attributes
km31.id = button_data["id"]
km31.warna = button_data["warna"]
km31.angka = button_data["angka"]

km32 = Button(
    image=button_image_26,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(km32)
)
button_data = {"id": "km32", "warna": "merah", "angka": 3}
# Store all data as attributes
km32.id = button_data["id"]
km32.warna = button_data["warna"]
km32.angka = button_data["angka"]

km33 = Button(
    image=button_image_26,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(km33)
)
button_data = {"id": "km33", "warna": "merah", "angka": 3}
# Store all data as attributes
km33.id = button_data["id"]
km33.warna = button_data["warna"]
km33.angka = button_data["angka"]

############################# TITLE #################################
image_image_19 = PhotoImage(
    file=relative_to_assets("image_19.png"))
title_game = canvas.create_image(
    1054.0,
    395.0,
    image=image_image_19,
    tags=("title_game")
)

title_start = canvas.create_image(
    736.0,
    324.0,
    image=image_image_19,
    tags=("title_start")
)

############################# PLAYER AREA #################################
image_image_29 = PhotoImage(
    file=relative_to_assets("image_29.png"))
image_references["pink_tile"] = image_image_29
my_area = canvas.create_image(
    1323.0,
    115.0,
    image=image_image_29,
    tags=("tile", "pink_tile")
)

image_image_30 = PhotoImage(
    file=relative_to_assets("image_30.png"))
image_references["blue_tile"] = image_image_30
his_area = canvas.create_image(
    1323.0,
    309.0,
    image=image_image_30,
    tags=("tile", "blue_tile")
)

############################# DEFAULT CUP BUTTON #################################

button_image_7 = PhotoImage(
    file=relative_to_assets("button_7.png"))
putih_glass_1 = Button(
    image=button_image_7,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(putih_glass_1)
)
putih_glass_1.place(
    width=157.0,
    height=155.0
)
gp1 = canvas.create_window(387.0, 330.0, window=putih_glass_1)
button_data = {"id": "p1", "status": "kosong", "warna": "putih"}
# Store all data as attributes
putih_glass_1.id = button_data["id"]
putih_glass_1.status = button_data["status"]
putih_glass_1.warna = button_data["warna"]

button_image_8 = PhotoImage(
    file=relative_to_assets("button_8.png"))
putih_glass_2 = Button(
    image=button_image_8,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: handle_button_click(putih_glass_2),
    relief="flat"
)
putih_glass_2.place(
    width=157.0,
    height=155.0
)
gp2 = canvas.create_window(563.0, 330.0, window=putih_glass_2)
button_data = {"id": "p2", "status": "kosong", "warna": "putih"}
# Store all data as attributes
putih_glass_2.id = button_data["id"]
putih_glass_2.status = button_data["status"]
putih_glass_2.warna = button_data["warna"]

button_image_9 = PhotoImage(
    file=relative_to_assets("button_9.png"))
putih_glass_3 = Button(
    image=button_image_9,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: handle_button_click(putih_glass_3),
    relief="flat"
)
putih_glass_3.place(
    width=157.0,
    height=155.0
)
gp3 = canvas.create_window(738.0, 330.0, window=putih_glass_3)
button_data = {"id": "p3", "status": "kosong", "warna": "putih"}
# Store all data as attributes
putih_glass_3.id = button_data["id"]
putih_glass_3.status = button_data["status"]
putih_glass_3.warna = button_data["warna"]

button_image_10 = PhotoImage(
    file=relative_to_assets("button_10.png"))
putih_glass_4 = Button(
    image=button_image_10,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: handle_button_click(putih_glass_4),
    relief="flat"
)
putih_glass_4.place(
    width=157.0,
    height=155.0
)
gp4 = canvas.create_window(387.0, 507.0, window=putih_glass_4)
button_data = {"id": "p4", "status": "kosong", "warna": "putih"}
# Store all data as attributes
putih_glass_4.id = button_data["id"]
putih_glass_4.status = button_data["status"]
putih_glass_4.warna = button_data["warna"]

button_image_11 = PhotoImage(
    file=relative_to_assets("button_11.png"))
putih_glass_5 = Button(
    image=button_image_11,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: handle_button_click(putih_glass_5),
    relief="flat"
)
putih_glass_5.place(
    width=157.0,
    height=155.0
)
gp5 = canvas.create_window(563.0, 507.0, window=putih_glass_5)
button_data = {"id": "p5", "status": "kosong", "warna": "putih"}
# Store all data as attributes
putih_glass_5.id = button_data["id"]
putih_glass_5.status = button_data["status"]
putih_glass_5.warna = button_data["warna"]

button_image_12 = PhotoImage(
    file=relative_to_assets("button_12.png"))
putih_glass_6 = Button(
    image=button_image_12,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: handle_button_click(putih_glass_6),
    relief="flat"
)
putih_glass_6.place(
    width=157.0,
    height=155.0
)
gp6 = canvas.create_window(738.0, 507.0, window=putih_glass_6)
button_data = {"id": "p6", "status": "kosong", "warna": "putih"}
# Store all data as attributes
putih_glass_6.id = button_data["id"]
putih_glass_6.status = button_data["status"]
putih_glass_6.warna = button_data["warna"]

button_image_13 = PhotoImage(
    file=relative_to_assets("button_13.png"))
putih_glass_7 = Button(
    image=button_image_13,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: handle_button_click(putih_glass_7),
    relief="flat"
)
putih_glass_7.place(
    width=157.0,
    height=155.0
)
gp7 = canvas.create_window(387.0, 684.0, window=putih_glass_7)
button_data = {"id": "p7", "status": "kosong", "warna": "putih"}
# Store all data as attributes
putih_glass_7.id = button_data["id"]
putih_glass_7.status = button_data["status"]
putih_glass_7.warna = button_data["warna"]

button_image_14 = PhotoImage(
    file=relative_to_assets("button_14.png"))
putih_glass_8 = Button(
    image=button_image_14,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: handle_button_click(putih_glass_8),
    relief="flat"
)
putih_glass_8.place(
    width=157.0,
    height=155.0
)
gp8 = canvas.create_window(563.0, 684.0, window=putih_glass_8)
button_data = {"id": "p8", "status": "kosong", "warna": "putih"}
# Store all data as attributes
putih_glass_8.id = button_data["id"]
putih_glass_8.status = button_data["status"]
putih_glass_8.warna = button_data["warna"]

button_image_6 = PhotoImage(
    file=relative_to_assets("button_6.png"))
putih_glass_9 = Button(
    image=button_image_6,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: handle_button_click(putih_glass_9),
    relief="flat"
)
putih_glass_9.place(
    width=157.0,
    height=155.0
)
gp9 = canvas.create_window(738.0, 684.0, window=putih_glass_9)
button_data = {"id": "p9", "status": "kosong", "warna": "putih"}
# Store all data as attributes
putih_glass_9.id = button_data["id"]
putih_glass_9.status = button_data["status"]
putih_glass_9.warna = button_data["warna"]

####################### DEFAULT COLORED CUP BUTTON #############################
button_image_33 = PhotoImage(
    file=relative_to_assets("button_33.png"))
biru_glass_1 = Button(
    image=button_image_33,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(biru_glass_1)
)
biru_glass_1.place(
    width=157.0,
    height=155.0
)
gb1 = canvas.create_window(387.0, 330.0, window=biru_glass_1)
button_data = {"id": "p1", "status": "kosong", "warna": "biru"}
# Store all data as attributes
biru_glass_1.id = button_data["id"]
biru_glass_1.status = button_data["status"]
biru_glass_1.warna = button_data["warna"]

biru_glass_2 = Button(
    image=button_image_33,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(biru_glass_2)
)
biru_glass_2.place(
    width=157.0,
    height=155.0
)
gb2 = canvas.create_window(563.0, 330.0, window=biru_glass_2)
button_data = {"id": "p2", "status": "kosong", "warna": "biru"}
# Store all data as attributes
biru_glass_2.id = button_data["id"]
biru_glass_2.status = button_data["status"]
biru_glass_2.warna = button_data["warna"]

biru_glass_3 = Button(
    image=button_image_33,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(biru_glass_3)
)
biru_glass_3.place(
    width=157.0,
    height=155.0
)
gb3 = canvas.create_window(738.0, 330.0, window=biru_glass_3)
button_data = {"id": "p3", "status": "kosong", "warna": "biru"}
# Store all data as attributes
biru_glass_3.id = button_data["id"]
biru_glass_3.status = button_data["status"]
biru_glass_3.warna = button_data["warna"]

biru_glass_4 = Button(
    image=button_image_33,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(biru_glass_4)
)
biru_glass_4.place(
    width=157.0,
    height=155.0
)
gb4 = canvas.create_window(387.0, 507.0, window=biru_glass_4)
button_data = {"id": "p4", "status": "kosong", "warna": "biru"}
# Store all data as attributes
biru_glass_4.id = button_data["id"]
biru_glass_4.status = button_data["status"]
biru_glass_4.warna = button_data["warna"]

biru_glass_5 = Button(
    image=button_image_33,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(biru_glass_5)
)
biru_glass_5.place(
    width=157.0,
    height=155.0
)
gb5 = canvas.create_window(563.0, 507.0, window=biru_glass_5)
button_data = {"id": "p5", "status": "kosong", "warna": "biru"}
# Store all data as attributes
biru_glass_5.id = button_data["id"]
biru_glass_5.status = button_data["status"]
biru_glass_5.warna = button_data["warna"]

biru_glass_6 = Button(
    image=button_image_33,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(biru_glass_6)
)
biru_glass_6.place(
    width=157.0,
    height=155.0
)
gb6 = canvas.create_window(738.0, 507.0, window=biru_glass_6)
button_data = {"id": "p6", "status": "kosong", "warna": "biru"}
# Store all data as attributes
biru_glass_6.id = button_data["id"]
biru_glass_6.status = button_data["status"]
biru_glass_6.warna = button_data["warna"]

biru_glass_7 = Button(
    image=button_image_33,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(biru_glass_7)
)
biru_glass_7.place(
    width=157.0,
    height=155.0
)
gb7 = canvas.create_window(387.0, 684.0, window=biru_glass_7)
button_data = {"id": "p7", "status": "kosong", "warna": "biru"}
# Store all data as attributes
biru_glass_7.id = button_data["id"]
biru_glass_7.status = button_data["status"]
biru_glass_7.warna = button_data["warna"]

biru_glass_8 = Button(
    image=button_image_33,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(biru_glass_8)
)
biru_glass_8.place(
    width=157.0,
    height=155.0
)
gb8 = canvas.create_window(563.0, 684.0, window=biru_glass_8)
button_data = {"id": "p8", "status": "kosong", "warna": "biru"}
# Store all data as attributes
biru_glass_8.id = button_data["id"]
biru_glass_8.status = button_data["status"]
biru_glass_8.warna = button_data["warna"]

biru_glass_9 = Button(
    image=button_image_33,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(biru_glass_9)
)
biru_glass_9.place(
    width=157.0,
    height=155.0
)
gb9 = canvas.create_window(738.0, 684.0, window=biru_glass_9)
button_data = {"id": "p9", "status": "kosong", "warna": "biru"}
# Store all data as attributes
biru_glass_9.id = button_data["id"]
biru_glass_9.status = button_data["status"]
biru_glass_9.warna = button_data["warna"]

button_image_34 = PhotoImage(
    file=relative_to_assets("button_34.png"))
merah_glass_1 = Button(
    image=button_image_34,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(merah_glass_1)
)
merah_glass_1.place(
    width=157.0,
    height=155.0
)
gm1 = canvas.create_window(387.0, 330.0, window=merah_glass_1)
# GM1
button_data = {"id": "p1", "status": "kosong", "warna": "merah"}
# Store all data as attributes
merah_glass_1.id = button_data["id"]
merah_glass_1.status = button_data["status"]
merah_glass_1.warna = button_data["warna"]

merah_glass_2 = Button(
    image=button_image_34,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(merah_glass_2)
)
merah_glass_2.place(
    width=157.0,
    height=155.0
)
gm2 = canvas.create_window(563.0, 330.0, window=merah_glass_2)
# GM2
button_data = {"id": "p2", "status": "kosong", "warna": "merah"}
# Store all data as attributes
merah_glass_2.id = button_data["id"]
merah_glass_2.status = button_data["status"]
merah_glass_2.warna = button_data["warna"]

merah_glass_3 = Button(
    image=button_image_34,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(merah_glass_3)
)
merah_glass_3.place(
    width=157.0,
    height=155.0
)
gm3 = canvas.create_window(738.0, 330.0, window=merah_glass_3)
# GM3
button_data = {"id": "p3", "status": "kosong", "warna": "merah"}
# Store all data as attributes
merah_glass_3.id = button_data["id"]
merah_glass_3.status = button_data["status"]
merah_glass_3.warna = button_data["warna"]

merah_glass_4 = Button(
    image=button_image_34,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(merah_glass_4)
)
merah_glass_4.place(
    width=157.0,
    height=155.0
)
gm4 = canvas.create_window(387.0, 507.0, window=merah_glass_4)
# GM4
button_data = {"id": "p4", "status": "kosong", "warna": "merah"}
# Store all data as attributes
merah_glass_4.id = button_data["id"]
merah_glass_4.status = button_data["status"]
merah_glass_4.warna = button_data["warna"]

merah_glass_5 = Button(
    image=button_image_34,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(merah_glass_5)
)
merah_glass_5.place(
    width=157.0,
    height=155.0
)
gm5 = canvas.create_window(563.0, 507.0, window=merah_glass_5)
# GM5
button_data = {"id": "p5", "status": "kosong", "warna": "merah"}
# Store all data as attributes
merah_glass_5.id = button_data["id"]
merah_glass_5.status = button_data["status"]
merah_glass_5.warna = button_data["warna"]

merah_glass_6 = Button(
    image=button_image_34,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(merah_glass_6)
)
merah_glass_6.place(
    width=157.0,
    height=155.0
)
gm6 = canvas.create_window(738.0, 507.0, window=merah_glass_6)
# GM6
button_data = {"id": "p6", "status": "kosong", "warna": "merah"}
# Store all data as attributes
merah_glass_6.id = button_data["id"]
merah_glass_6.status = button_data["status"]
merah_glass_6.warna = button_data["warna"]

merah_glass_7 = Button(
    image=button_image_34,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(merah_glass_7)
)
merah_glass_7.place(
    width=157.0,
    height=155.0
)
gm7 = canvas.create_window(387.0, 684.0, window=merah_glass_7)
# GM7
button_data = {"id": "p7", "status": "kosong", "warna": "merah"}
# Store all data as attributes
merah_glass_7.id = button_data["id"]
merah_glass_7.status = button_data["status"]
merah_glass_7.warna = button_data["warna"]

merah_glass_8 = Button(
    image=button_image_34,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(merah_glass_8)
)
merah_glass_8.place(
    width=157.0,
    height=155.0
)
gm8 = canvas.create_window(563.0, 684.0, window=merah_glass_8)
# GM8
button_data = {"id": "p8", "status": "kosong", "warna": "merah"}
# Store all data as attributes
merah_glass_8.id = button_data["id"]
merah_glass_8.status = button_data["status"]
merah_glass_8.warna = button_data["warna"]

merah_glass_9 = Button(
    image=button_image_34,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: handle_button_click(merah_glass_9)
)
merah_glass_9.place(
    width=157.0,
    height=155.0
)
gm9 = canvas.create_window(738.0, 684.0, window=merah_glass_9)
# GM9
button_data = {"id": "p9", "status": "kosong", "warna": "merah"}
# Store all data as attributes
merah_glass_9.id = button_data["id"]
merah_glass_9.status = button_data["status"]
merah_glass_9.warna = button_data["warna"]

############################################## BUTTONS #############################################

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
draw_button = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: quit_app(),
    relief="flat"
)
draw_button.place(
    x=476.0,
    y=324.0,
    width=569.0,
    height=169.0
)
draw_button_id = canvas.create_window(736, 574, window=draw_button)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
lose_button = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: quit_app(),
    relief="flat"
)
lose_button.place(
    x=476.0,
    y=324.0,
    width=564.0,
    height=169.0
)
lose_button_id = canvas.create_window(736, 574, window=lose_button)

button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
win_button = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: quit_app(),
    relief="flat"
)
win_button.place(
    x=476.0,
    y=324.0,
    width=566.0,
    height=169.0
)
win_button_id = canvas.create_window(736, 574, window=win_button)

button_image_4 = PhotoImage(
    file=relative_to_assets("button_4.png"))
start_button = Button(
    image=button_image_4,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: show_all_elements(),
    relief="flat"
)
start_button.place(
    x=736.0,
    y=574.0,
    width=570.0,
    height=169.0
)
# 736.0,
# 324.0,
start_button_id = canvas.create_window(736, 574, window=start_button)

####################################### COLORED NUMBER CUPS #########################################
image_image_52 = PhotoImage(
    file=relative_to_assets("image_52.png"))
image_references["biru_cup_6"] = image_image_52
biru_cup_6 = canvas.create_image(
    1271.420654296875,
    401.0,
    image=image_image_52,
    tags=("colored_cup", "biru", "6")
)

image_image_53 = PhotoImage(
    file=relative_to_assets("image_53.png"))
image_references["biru_cup_1"] = image_image_53
biru_cup_1 = canvas.create_image(
    251.0,
    401.0,
    image=image_image_53,
    tags=("colored_cup", "biru", "1")
)

image_image_54 = PhotoImage(
    file=relative_to_assets("image_54.png"))
image_references["biru_cup_2"] = image_image_54
biru_cup_2 = canvas.create_image(
    506.10498046875,
    401.0,
    image=image_image_54,
    tags=("colored_cup", "biru", "2")
)

image_image_55 = PhotoImage(
    file=relative_to_assets("image_55.png"))
image_references["biru_cup_3"] = image_image_55
biru_cup_3 = canvas.create_image(
    761.210205078125,
    401.0,
    image=image_image_55,
    tags=("colored_cup", "biru", "3")
)

image_image_56 = PhotoImage(
    file=relative_to_assets("image_56.png"))
image_references["biru_cup_4"] = image_image_56
biru_cup_4 = canvas.create_image(
    1016.3154296875,
    401.0,
    image=image_image_56,
    tags=("colored_cup", "biru", "4")
)

image_image_57 = PhotoImage(
    file=relative_to_assets("image_57.png"))
image_references["merah_cup_2"] = image_image_57
merah_cup_2 = canvas.create_image(
    506.10498046875,
    588.0,
    image=image_image_57,
    tags=("colored_cup", "merah", "2")
)

image_image_58 = PhotoImage(
    file=relative_to_assets("image_58.png"))
image_references["merah_cup_3"] = image_image_58
merah_cup_3 = canvas.create_image(
    761.210205078125,
    588.0,
    image=image_image_58,
    tags=("colored_cup", "merah", "3")
)

image_image_59 = PhotoImage(
    file=relative_to_assets("image_59.png"))
image_references["merah_cup_4"] = image_image_59
merah_cup_4 = canvas.create_image(
    1021.39208984375,
    588.0,
    image=image_image_59,
    tags=("colored_cup", "merah", "4")
)

image_image_60 = PhotoImage(
    file=relative_to_assets("image_60.png"))
image_references["merah_cup_6"] = image_image_60
merah_cup_6 = canvas.create_image(
    1271.420654296875,
    588.0,
    image=image_image_60,
    tags=("colored_cup", "merah", "6")
)

image_image_61 = PhotoImage(
    file=relative_to_assets("image_61.png"))
image_references["merah_cup_1"] = image_image_61
merah_cup_1 = canvas.create_image(
    251.0,
    588.0,
    image=image_image_61,
    tags=("colored_cup", "merah", "1")
)

image_image_62 = PhotoImage(
    file=relative_to_assets("image_62.png"))
image_references["putih_cup_6"] = image_image_62
putih_cup_6 = canvas.create_image(
    1271.420654296875,
    775.0,
    image=image_image_62,
    tags=("colored_cup", "putih", "6")
)

image_image_63 = PhotoImage(
    file=relative_to_assets("image_63.png"))
image_references["putih_cup_1"] = image_image_63
putih_cup_1 = canvas.create_image(
    251.0,
    775.0,
    image=image_image_63,
    tags=("colored_cup", "putih", "1")
)

image_image_64 = PhotoImage(
    file=relative_to_assets("image_64.png"))
image_references["putih_cup_2"] = image_image_64
putih_cup_2 = canvas.create_image(
    506.10498046875,
    775.0,
    image=image_image_64,
    tags=("colored_cup", "putih", "2")
)

image_image_65 = PhotoImage(
    file=relative_to_assets("image_65.png"))
image_references["putih_cup_3"] = image_image_65
putih_cup_3 = canvas.create_image(
    763.74853515625,
    775.0,
    image=image_image_65,
    tags=("colored_cup", "putih", "3")
)

image_image_66 = PhotoImage(
    file=relative_to_assets("image_66.png"))
image_references["putih_cup_4"] = image_image_66
putih_cup_4 = canvas.create_image(
    1021.39208984375,
    775.0,
    image=image_image_66,
    tags=("colored_cup", "putih", "4")
)

image_win = PhotoImage(file=relative_to_assets("button_3.png"))
you_win_image_id = canvas.create_image(
    476, 324,
    image=image_win,
    state="hidden",
    tags=("you_win_image",)
)

image_draw = PhotoImage(file=relative_to_assets("button_2.png"))
you_draw_image_id = canvas.create_image(
    476, 324,
    image=image_draw,
    state="hidden",
    tags=("you_draw_image",)
)

image_lose = PhotoImage(file=relative_to_assets("button_1.png"))
you_lose_image_id = canvas.create_image(
    476, 324,
    image=image_lose,
    state="hidden",
    tags=("you_lose_image",)
)

############################# CAT HEADS #################################

image_image_32 = PhotoImage(
    file=relative_to_assets("image_32.png"))
image_references["putih_head"] = image_image_32
putih_head = canvas.create_image(
    387.0,
    330.0,
    image=image_image_32,
    tags=("cat_head", "white_head", "putih")
)

image_image_33 = PhotoImage(
    file=relative_to_assets("image_33.png"))
image_references["biru_head"] = image_image_33
biru_head = canvas.create_image(
    344.0,
    100.0,
    image=image_image_33,
    tags=("cat_head", "blue_head", "biru")
)

image_image_34 = PhotoImage(
    file=relative_to_assets("image_34.png"))
image_references["merah_head"] = image_image_34
merah_head = canvas.create_image(
    223.0,
    100.0,
    image=image_image_34,
    tags=("cat_head", "red_head", "merah")
)

################################################### FUNCTIONS ######################################
#################
### VARIABLES ###
#################
button_x_pos = 476.0
button_y_pos = 324.0

card_id = [
    {"id": "kp1", "warna": "putih", "angka": 1},
    {"id": "kp2", "warna": "putih", "angka": 2},
    {"id": "kp3", "warna": "putih", "angka": 3},
    {"id": "kb1", "warna": "biru", "angka": 1},
    {"id": "kb2", "warna": "biru", "angka": 2},
    {"id": "kb3", "warna": "biru", "angka": 3},
    {"id": "km1", "warna": "merah", "angka": 1},
    {"id": "km2", "warna": "merah", "angka": 2},
    {"id": "km3", "warna": "merah", "angka": 3}
]

cup_id = [
    {"id": "p1", "status": "kosong", "warna": "putih"},
    {"id": "p2", "status": "kosong", "warna": "putih"},
    {"id": "p3", "status": "kosong", "warna": "putih"},
    {"id": "p4", "status": "kosong", "warna": "putih"},
    {"id": "p5", "status": "kosong", "warna": "putih"},
    {"id": "p6", "status": "kosong", "warna": "putih"},
    {"id": "p7", "status": "kosong", "warna": "putih"},
    {"id": "p8", "status": "kosong", "warna": "putih"},
    {"id": "p9", "status": "kosong", "warna": "putih"}
]

colored_cup_id = [
    {"id": "p1", "status": "kosong", "warna": "biru"},
    {"id": "p2", "status": "kosong", "warna": "biru"},
    {"id": "p3", "status": "kosong", "warna": "biru"},
    {"id": "p4", "status": "kosong", "warna": "biru"},
    {"id": "p5", "status": "kosong", "warna": "biru"},
    {"id": "p6", "status": "kosong", "warna": "biru"},
    {"id": "p7", "status": "kosong", "warna": "biru"},
    {"id": "p8", "status": "kosong", "warna": "biru"},
    {"id": "p9", "status": "kosong", "warna": "biru"},
    {"id": "p1", "status": "kosong", "warna": "merah"},
    {"id": "p2", "status": "kosong", "warna": "merah"},
    {"id": "p3", "status": "kosong", "warna": "merah"},
    {"id": "p4", "status": "kosong", "warna": "merah"},
    {"id": "p5", "status": "kosong", "warna": "merah"},
    {"id": "p6", "status": "kosong", "warna": "merah"},
    {"id": "p7", "status": "kosong", "warna": "merah"},
    {"id": "p8", "status": "kosong", "warna": "merah"},
    {"id": "p9", "status": "kosong", "warna": "merah"}
]


def quit_app():
    """Closes the application window"""
    root.destroy()  # Replace 'window' with your root window variable name if different
    # global root
    # root.quit()

def hide_all_except_start():
    canvas.itemconfig("default_main_area", state='hidden')
    canvas.itemconfig("score_area", state='hidden')
    canvas.itemconfig("card_area", state='hidden')
    canvas.itemconfig("back_card", state='hidden')
    canvas.itemconfig("tile", state='hidden')
    canvas.itemconfig("cat_head", state='hidden')
    canvas.itemconfig("title_game", state='hidden')
    canvas.itemconfig("colored_cup", state='hidden')
    canvas.itemconfig(draw_button_id, state="hidden")
    canvas.itemconfig(win_button_id, state="hidden")
    canvas.itemconfig(lose_button_id, state="hidden")
    canvas.itemconfig(his_entry_score_id, state="hidden")
    canvas.itemconfig(her_entry_score_id, state="hidden")
    for i in range(1, 10):
        canvas.itemconfig(globals()[f"gp{i}"], state="hidden")
    for i in range(1, 10):
        canvas.itemconfig(globals()[f"gb{i}"], state="hidden")
    for i in range(1, 10):
        canvas.itemconfig(globals()[f"gm{i}"], state="hidden")
    # ... rest of the hiding logic


def show_all_elements():
    canvas.itemconfig("default_main_area", state='normal')
    canvas.itemconfig("score_area", state='normal')
    canvas.itemconfig("card_area", state='normal')
    canvas.itemconfig("back_card", state='normal')
    canvas.itemconfig("title_game", state='normal')
    canvas.itemconfig("title_start", state='hidden')
    canvas.itemconfig("cat_head", state='hidden')
    canvas.itemconfig(his_entry_score_id, state="normal")
    canvas.itemconfig(her_entry_score_id, state="normal")
    canvas.itemconfig(start_button_id, state="hidden")

    # Initialize both player's and computer's cards
    select_and_show_random_buttons()
    place_random_buttons()  # User's cards
    initialize_computer_cards()  # Computer's cards


# Create containers for all buttons
white_buttons = {}
red_buttons = {}
blue_buttons = {}
red_canvas_ids = {}
blue_canvas_ids = {}
white_canvas_ids = {}
computer_score = 0
user_turn_count = 0

# Store buttons and their canvas IDs when creating them
for i in range(1, 10):
    # For red buttons
    red_buttons[i] = globals()[f"merah_glass_{i}"]
    red_canvas_ids[i] = globals()[f"gm{i}"]
    red_buttons[i]._canvas_id = red_canvas_ids[i]

    # For blue buttons
    blue_buttons[i] = globals()[f"biru_glass_{i}"]
    blue_canvas_ids[i] = globals()[f"gb{i}"]
    blue_buttons[i]._canvas_id = blue_canvas_ids[i]

    # For white buttons
    white_buttons[i] = globals()[f"putih_glass_{i}"]
    white_canvas_ids[i] = globals()[f"gp{i}"]
    white_buttons[i]._canvas_id = white_canvas_ids[i]


def select_and_show_random_buttons():
    # First hide all buttons
    all_buttons = list(red_buttons.values()) + list(blue_buttons.values()) + list(white_buttons.values())
    for button in all_buttons:
        if hasattr(button, '_canvas_id'):
            canvas.itemconfig(button._canvas_id, state='hidden')

    # Randomly choose a red:blue ratio for the 3 colored buttons
    red_blue_choice = random.choice([(0, 3), (1, 2), (2, 1), (3, 0)])
    red_count, blue_count = red_blue_choice

    # Create a set to track used IDs
    used_ids = set()
    selected_buttons = []

    # Select colored buttons without duplicate IDs
    # 1. Select red buttons
    if red_count > 0:
        available_reds = [btn for btn in red_buttons.values()
                          if hasattr(btn, '_canvas_id') and btn.id not in used_ids]
        selected_reds = random.sample(available_reds, min(red_count, len(available_reds)))
        selected_buttons.extend(selected_reds)
        used_ids.update(btn.id for btn in selected_reds)

    # 2. Select blue buttons
    if blue_count > 0:
        available_blues = [btn for btn in blue_buttons.values()
                           if hasattr(btn, '_canvas_id') and btn.id not in used_ids]
        selected_blues = random.sample(available_blues, min(blue_count, len(available_blues)))
        selected_buttons.extend(selected_blues)
        used_ids.update(btn.id for btn in selected_blues)

    # 3. Select white buttons (6 remaining) without duplicate IDs
    available_whites = [btn for btn in white_buttons.values()
                        if hasattr(btn, '_canvas_id') and btn.id not in used_ids]
    selected_whites = random.sample(available_whites, min(6, len(available_whites)))
    selected_buttons.extend(selected_whites)
    used_ids.update(btn.id for btn in selected_whites)

    # Show selected buttons (3 colored + 6 white)
    for button in selected_buttons:
        canvas.itemconfig(button._canvas_id, state='normal')

    # Print selection for debugging
    print(f"Selected {len(selected_buttons)} buttons (expected 9)")
    print(f"Colored: {red_count} red, {blue_count} blue")
    print(f"Red IDs: {[btn.id for btn in selected_buttons if hasattr(btn, 'warna') and btn.warna == 'merah']}")
    print(f"Blue IDs: {[btn.id for btn in selected_buttons if hasattr(btn, 'warna') and btn.warna == 'biru']}")
    print(f"White IDs: {[btn.id for btn in selected_buttons if hasattr(btn, 'warna') and btn.warna == 'putih']}")


def place_random_buttons():
    # List of all possible buttons
    global all_buttons, positions, card_in_play

    positions = [
        (330.0, 762.0),
        (500.0, 762.0),
        (670.0, 762.0)
    ]

    dict_pos = {"list_pos_1": [kp11, kp21, kp31, kb11, kb21, kb31, km11, km21, km31],
                "list_pos_2": [kp12, kp22, kp32, kb12, kb22, kb32, km12, km22, km32],
                "list_pos_3": [kp13, kp23, kp33, kb13, kb23, kb33, km13, km23, km33]}

    selected_buttons = []
    for one_post in positions:
        if one_post == positions[0]:
            button_post = dict_pos["list_pos_1"]
            new_card = random.choice(button_post)
            selected_buttons.append(new_card)
        elif one_post == positions[1]:
            button_post = dict_pos["list_pos_2"]
            new_card = random.choice(button_post)
            selected_buttons.append(new_card)
        else:
            button_post = dict_pos["list_pos_3"]
            new_card = random.choice(button_post)
            selected_buttons.append(new_card)

    # Place selected buttons
    for i, button in enumerate(selected_buttons):
        x, y = positions[i]
        button.place(
            x=x,
            y=y,
            anchor="nw"  # Explicit anchor point
        )
        button.lift()  # Bring to front
        print(f"Placed {button.id} at ({x}, {y})")

    # Force UI update
    button.master.update()


# Add this global variable
current_turn = "user"  # or "computer"


def end_user_turn():
    """Called after user finishes their move"""
    global current_turn
    current_turn = "computer"
    # Delay computer's turn slightly for better UX
    canvas.after(1000, computer_turn)


def end_computer_turn():
    """Called after computer finishes its move"""
    global current_turn
    current_turn = "user"
    # Now it's user's turn again


# Global variables to track button clicks
first_click = None
second_click = None
result = None


def handle_button_click(button):
    """Handles button clicks and compares two buttons"""
    global first_click, second_click, result, current_turn, user_turn_count

    # Only allow clicks during user's turn
    if current_turn != "user":
        return

    # Get button attributes
    if hasattr(button, 'angka'):
        clicked_data = {
            "button_obj": button,  # Store the button object
            "id": button.id,
            "warna": button.warna,
            "angka": button.angka,
            "pos": (button.winfo_x(), button.winfo_y())
        }
        # remove_kartu(button)
    else:
        clicked_data = {
            "button_obj": button,  # Store the button object
            "id": button.id,
            "warna": button.warna,
            "status": button.status
        }

    print(f"Button saved: {clicked_data}")

    # Store clicks
    if first_click is None:
        first_click = clicked_data
        print("First button selected. Click another button to compare.")

    else:
        second_click = clicked_data
        compare_buttons(is_computer=False)
        if current_turn == "user":
            update_my_score_display()
            current_turn = "komputer"
        else:
            current_turn = "user"

        if current_turn == "komputer":
            user_turn_count += 1
            if user_turn_count >= 5:
                print("Giliran user selesai!")
                update_image_based_on_selection(is_computer=True)
                check_winner()

        update_image_based_on_selection(is_computer=False)

        # Remove and replace BOTH cards
        if first_click and 'pos' in first_click:
            remove_and_replace_card(first_click['button_obj'])
        if second_click and 'pos' in second_click:
            remove_and_replace_card(second_click['button_obj'])

        # Reset for next comparison
        first_click = None
        second_click = None

        # User's turn is over
        end_user_turn()

    # Visual feedback
    try:
        button.config(relief="sunken")
        button.after(200, lambda: button.config(relief="flat"))
    except TclError:
        print(f"Button {button} sudah tidak tersedia (mungkin sudah dihapus dari UI)")


def show_end_screen(status: str):
    # Sembunyikan semua elemen canvas
    canvas.itemconfig("default_main_area", state='hidden')
    canvas.itemconfig("score_area", state='hidden')
    canvas.itemconfig("card_area", state='hidden')
    canvas.itemconfig("back_card", state='hidden')
    canvas.itemconfig("tile", state='hidden')
    canvas.itemconfig("cat_head", state='hidden')
    canvas.itemconfig("colored_cup", state='hidden')
    canvas.itemconfig(his_entry_score_id, state="hidden")
    canvas.itemconfig(her_entry_score_id, state="hidden")

    # Sembunyikan semua gelas di canvas
    for i in range(1, 10):
        canvas.itemconfig(globals()[f"gp{i}"], state="hidden")
        canvas.itemconfig(globals()[f"gb{i}"], state="hidden")
        canvas.itemconfig(globals()[f"gm{i}"], state="hidden")

    # Tampilkan logo dan latar
    canvas.itemconfig("title_game", state='hidden')
    canvas.itemconfig("title_start", state='normal')  # opsional

    # Sembunyikan tombol start
    canvas.itemconfig(start_button_id, state='hidden')

    # Sembunyikan semua tombol kartu user
    all_user_cards = [
        kp11, kp12, kp13, kp21, kp22, kp23, kp31, kp32, kp33,
        kb11, kb12, kb13, kb21, kb22, kb23, kb31, kb32, kb33,
        km11, km12, km13, km21, km22, km23, km31, km32, km33
    ]
    for btn in all_user_cards:
        try:
            btn.place_forget()
        except:
            pass

    # Sembunyikan semua tombol akhir
    canvas.itemconfig(win_button_id, state='hidden')
    canvas.itemconfig(draw_button_id, state='hidden')
    canvas.itemconfig(lose_button_id, state='hidden')

    # Tampilkan hanya tombol hasil akhir sesuai status
    if status == "win":
        canvas.itemconfig(win_button_id, state='normal')
    elif status == "draw":
        canvas.itemconfig(draw_button_id, state='normal')
    elif status == "lose":
        canvas.itemconfig(lose_button_id, state='normal')


def check_winner():
    time.sleep(1.5)
    if total_score > computer_score:
        print("User menang!")
        show_end_screen("win")
    elif total_score < computer_score:
        print("Komputer menang!")
        show_end_screen("lose")
    else:
        print("Seri!")
        show_end_screen("draw")


def remove_and_replace_card(button):
    """Handles complete card removal and replacement"""
    pos = get_button_position(button)
    if pos:
        remove_kartu(button)
        ambil_kartu(pos)


def get_button_position(button):
    """Returns the position slot the button occupies"""
    card_positions = [
        (330.0, 762.0),  # Position 1
        (500.0, 762.0),  # Position 2
        (670.0, 762.0)  # Position 3
    ]

    button_pos = (button.winfo_x(), button.winfo_y())
    for pos in card_positions:
        if (abs(button_pos[0] - pos[0]) < 10 and
                abs(button_pos[1] - pos[1]) < 10):
            return pos
    return None


# Keep your existing remove_kartu and ambil_kartu functions
def remove_kartu(button):
    button.place_forget()
    print(f"Removed card {button.id}")


def ambil_kartu(pos):
    """Draws a new random card at position"""
    card_groups = {
        (330.0, 762.0): [kp11, kp21, kp31, kb11, kb21, kb31, km11, km21, km31],
        (500.0, 762.0): [kp12, kp22, kp32, kb12, kb22, kb32, km12, km22, km32],
        (670.0, 762.0): [kp13, kp23, kp33, kb13, kb23, kb33, km13, km23, km33]
    }

    if pos in card_groups:
        new_card = random.choice(card_groups[pos])
        new_card.place(x=pos[0], y=pos[1], anchor="nw")
        new_card.lift()
        print(f"New card {new_card.id} at position {pos}")


def update_my_score_display():
    her_entry_score.config(state="normal")  # Ubah jadi normal dulu
    her_entry_score.delete(0, "end")  # Kosongkan
    her_entry_score.insert(0, str(total_score))  # Masukkan nilai terbaru
    her_entry_score.config(state="readonly")  # Lock lagi supaya tidak bisa diedit


# At the top of your script (global scope)
comparison_results = []  # Stores all results
latest_result = None  # Stores the most recent result
total_score = 0  # Stores running total score


def compare_buttons(is_computer=False):
    global total_score, computer_score, comparison_results, first_click, second_click, result, latest_result

    # Reset latest result before recalculating
    latest_result = 0

    # Determine which button has angka (number)
    angka_button = first_click if 'angka' in first_click else second_click
    other_button = second_click if angka_button == first_click else first_click

    # Rule 1: If either button is 'putih', angka stays the same
    if first_click['warna'] == 'putih' or second_click['warna'] == 'putih':
        result = angka_button['angka']

    # Rule 2: If colors match (both 'biru' or both 'merah')
    elif first_click['warna'] == second_click['warna']:
        result = angka_button['angka'] * 2

    # Rule 3: Red and blue combination
    elif (first_click['warna'] == 'merah' and second_click['warna'] == 'biru') or \
            (first_click['warna'] == 'biru' and second_click['warna'] == 'merah'):
        result = 1

    else:
        result = 0

    # Update the appropriate score
    if is_computer:
        computer_score += result
    else:
        total_score += result

    latest_result = result
    comparison_results.append(result)

    print(f"Current player score: {total_score}")
    print(f"Current computer score: {computer_score}")
    print(f"Current result: {latest_result}")

    return result


def update_image_based_on_selection(is_computer=False):
    global first_click, second_click, canvas, image_references, latest_result

    # Validation checks
    if not (first_click and second_click):
        return
    if 'angka' not in first_click or 'warna' not in second_click:
        return

    # Get attributes and position
    first_warna = first_click['warna']
    second_button = second_click['button_obj']
    button_id = second_button.id

    # Get button position
    button_x = second_button.winfo_rootx() + second_button.winfo_width() // 2
    button_y = second_button.winfo_rooty() + second_button.winfo_height() // 2
    canvas_x = canvas.canvasx(button_x)
    canvas_y = canvas.canvasy(button_y)

    # 1. Find and hide the matching tile
    for item in canvas.find_withtag("default_main_area"):
        tags = canvas.gettags(item)
        if button_id in tags:
            canvas.itemconfig(item, state='hidden')  # Hide the original tile
            tile_pos = canvas.coords(item)
            break

    # 2. Create PINK TILE (bottom layer)
    tile_image = None
    if "pink_tile" in image_references:
        tile_image = canvas.create_image(
            canvas_x - 1,
            canvas_y + 5,
            image=image_references["pink_tile"],
            tags=("tile", "pink_tile", button_id)
        )

    # 3. Create CUP image (middle layer)
    cup_image = None
    if latest_result is not None:
        cup_image_key = f"{second_click['warna']}_cup_{latest_result}"
        if cup_image_key in image_references:
            cup_image = canvas.create_image(
                canvas_x,
                canvas_y - 0,
                image=image_references[cup_image_key],
                tags=("colored_cup", second_click['warna'], str(latest_result)))
            if tile_image:
                canvas.tag_raise(cup_image, tile_image)  # Cup above tile

    # 4. Create HEAD image (top layer)
    head_image = None
    if is_computer and 'warna' in second_click:
        head_color = second_click['warna']
    elif not is_computer and 'warna' in first_click:
        head_color = first_click['warna']
    else:
        head_color = 'putih'  # fallback

    head_image_key = f"{head_color}_head"
    if head_image_key in image_references:
        head_image = canvas.create_image(
            canvas_x,
            canvas_y - 30,
            image=image_references[head_image_key],
            tags=("cat_head", f"{head_color}_head", "match_result"))
        canvas.tag_raise(head_image)  # Head to very top

    # 5. Remove the original button
    if hasattr(second_button, '_canvas_id'):
        canvas.delete(second_button._canvas_id)
    second_button.destroy()

    # Store references
    if not hasattr(canvas, 'match_images'):
        canvas.match_images = []
    canvas.match_images.extend([img for img in [tile_image, cup_image, head_image] if img is not None])

    canvas.update_idletasks()


######################################## COMPUTER'S TURN ###########################################
def initialize_computer_cards():
    """Initializes and places computer's cards at the start of the game"""
    computer_positions = [
        (1000.0, 762.0),  # Computer card position 1
        (1170.0, 762.0),  # Computer card position 2
        (1340.0, 762.0)  # Computer card position 3
    ]

    # Dictionary mapping positions to computer card options
    computer_dict_pos = {
        "comp_pos_1": [kp11, kp21, kp31, kb11, kb21, kb31, km11, km21, km31],
        "comp_pos_2": [kp12, kp22, kp32, kb12, kb22, kb32, km12, km22, km32],
        "comp_pos_3": [kp13, kp23, kp33, kb13, kb23, kb33, km13, km23, km33]
    }

    # Place computer cards (hidden from user view)
    for i, pos in enumerate(computer_positions):
        pos_key = f"comp_pos_{i + 1}"
        card = random.choice(computer_dict_pos[pos_key])

        # Create a hidden version of the card (not visible to user)
        hidden_card = create_hidden_card(card, pos)

        # Store computer cards for later reference
        if not hasattr(canvas, 'computer_cards'):
            canvas.computer_cards = []
        canvas.computer_cards.append(hidden_card)


def create_hidden_card(card_template, position):
    """Creates a hidden version of a card for computer's use"""
    # Create a blank/invisible button that maintains the card properties
    hidden_card = Button(
        borderwidth=0,
        highlightthickness=0,
        relief="flat"
    )

    # Copy all attributes from the template card
    hidden_card.id = card_template.id
    hidden_card.warna = card_template.warna
    hidden_card.angka = card_template.angka

    # Place the card but keep it hidden (not visible to user)
    hidden_card.place(
        x=position[0],
        y=position[1],
        anchor="nw"
    )
    hidden_card.lower()  # Ensure it's behind other elements

    return hidden_card


def get_computer_cards():
    """Returns the computer's current cards"""
    if hasattr(canvas, 'computer_cards'):
        return [card for card in canvas.computer_cards if card.winfo_ismapped()]
    return []


def replace_computer_card(card_to_replace):
    """Replaces a used computer card with a new one"""
    if not hasattr(canvas, 'computer_cards') or card_to_replace not in canvas.computer_cards:
        return

    # Get the position of the card to replace
    pos = (card_to_replace.winfo_x(), card_to_replace.winfo_y())

    # Determine which position group to use
    position_groups = {
        (1000.0, 762.0): [kp11, kp21, kp31, kb11, kb21, kb31, km11, km21, km31],
        (1170.0, 762.0): [kp12, kp22, kp32, kb12, kb22, kb32, km12, km22, km32],
        (1340.0, 762.0): [kp13, kp23, kp33, kb13, kb23, kb33, km13, km23, km33]
    }

    # Remove the old card
    card_to_replace.place_forget()
    canvas.computer_cards.remove(card_to_replace)

    # Get new card options for this position
    if pos in position_groups:
        new_card_template = random.choice(position_groups[pos])
        new_card = create_hidden_card(new_card_template, pos)
        canvas.computer_cards.append(new_card)
        return new_card

    return None


def computer_turn():
    """Handles the computer's turn automatically"""
    global first_click, second_click, total_score, computer_score

    print("\n--- COMPUTER'S TURN ---")

    # Get computer's cards and available cups
    available_cards = get_computer_cards()
    available_cups = get_available_cups()

    print(f"Computer cards: {[card.id for card in available_cards]}")
    print(f"Available cups: {[cup.id for cup in available_cups]}")

    # Find the best card and cup combination based on the rules
    best_card, best_cup = find_best_move(available_cards, available_cups)

    if best_card and best_cup:
        print(f"Computer chooses: Card {best_card.id} -> Cup {best_cup.id}")

        # Simulate the button clicks
        first_click = {
            "button_obj": best_card,
            "id": best_card.id,
            "warna": best_card.warna,
            "angka": best_card.angka,
            "pos": (best_card.winfo_x(), best_card.winfo_y())
        }

        second_click = {
            "button_obj": best_cup,
            "id": best_cup.id,
            "warna": best_cup.warna,
            "status": best_cup.status
        }

        # Process the move
        compare_buttons(is_computer=True)
        update_his_score_display()

        # Replace the used computer card
        replace_computer_card(best_card)

        # Update the cup display
        update_computer_cup_display(best_card, best_cup)

        # Reset clicks for next turn
        first_click = None
        second_click = None

        # Computer's turn is over
        end_computer_turn()
    else:
        print("Computer couldn't find a valid move!")
        end_computer_turn()


def get_available_cards():
    """Returns all currently placed cards"""
    card_positions = [
        (330.0, 762.0),  # Position 1
        (500.0, 762.0),  # Position 2
        (670.0, 762.0)  # Position 3
    ]

    available_cards = []
    for pos in card_positions:
        # Find which widget is at this position
        x, y = pos
        # Get all widgets at this position
        widgets_at_pos = [w for w in canvas.winfo_children()
                          if isinstance(w, Button)
                          and abs(w.winfo_x() - x) < 10
                          and abs(w.winfo_y() - y) < 10]

        if widgets_at_pos:
            available_cards.append(widgets_at_pos[0])

    return available_cards


def get_available_cups():
    """Returns all cups that are not yet used (status kosong)"""
    all_cups = list(red_buttons.values()) + list(blue_buttons.values()) + list(white_buttons.values())
    available_cups = [cup for cup in all_cups
                      if hasattr(cup, 'status')
                      and cup.status == 'kosong'
                      and canvas.itemcget(cup._canvas_id, 'state') == 'normal']
    return available_cups


def find_best_move(available_cards, available_cups):
    """Finds the best card and cup combination based on the rules"""
    # Rule 1: Search for any colored cup available
    colored_cups = [cup for cup in available_cups if cup.warna in ['merah', 'biru']]

    # Rule 2: Search for matching color cards with biggest value
    if colored_cups:
        for cup in colored_cups:
            matching_cards = [card for card in available_cards if card.warna == cup.warna]
            if matching_cards:
                best_card = max(matching_cards, key=lambda x: x.angka)
                return best_card, cup

    # Rule 3: No matching color, choose biggest value card and put on white cup
    white_cups = [cup for cup in available_cups if cup.warna == 'putih']
    if white_cups:
        if available_cards:
            best_card = max(available_cards, key=lambda x: x.angka)
            return best_card, white_cups[0]  # can choose any white cup

    # Rule 4: No white cup available, find white card with biggest value and put on colored cup
    if colored_cups:
        white_cards = [card for card in available_cards if card.warna == 'putih']
        if white_cards:
            best_card = max(white_cards, key=lambda x: x.angka)
            return best_card, colored_cups[0]  # can choose any colored cup

    # Rule 5: No white cards, choose colored cards and put on available cups
    if colored_cups:
        colored_cards = [card for card in available_cards if card.warna in ['merah', 'biru']]
        if colored_cards:
            best_card = max(colored_cards, key=lambda x: x.angka)
            return best_card, colored_cups[0]  # can choose any colored cup

    # Fallback: if nothing else, just pick first available card and cup
    if available_cards and available_cups:
        return available_cards[0], available_cups[0]

    return None, None


def update_his_score_display():
    """Updates the computer's score display"""
    his_entry_score.config(state="normal")
    his_entry_score.delete(0, "end")
    his_entry_score.insert(0, str(computer_score))
    his_entry_score.config(state="readonly")


def update_computer_cup_display(card, cup):
    """Updates the display for computer's cup selection (with blue tile)"""
    global canvas, image_references

    # Get cup position
    cup_x = cup.winfo_rootx() + cup.winfo_width() // 2
    cup_y = cup.winfo_rooty() + cup.winfo_height() // 2
    canvas_x = canvas.canvasx(cup_x)
    canvas_y = canvas.canvasy(cup_y)

    # 1. Find and hide the matching tile
    for item in canvas.find_withtag("default_main_area"):
        tags = canvas.gettags(item)
        if cup.id in tags:
            canvas.itemconfig(item, state='hidden')
            break

    # 2. Create BLUE TILE (bottom layer)
    tile_image = None
    if "blue_tile" in image_references:
        tile_image = canvas.create_image(
            canvas_x - 1,
            canvas_y + 5,
            image=image_references["blue_tile"],
            tags=("tile", "blue_tile", cup.id)
        )

    # 3. Create CUP image (middle layer)
    cup_image = None
    result = latest_result  # From compare_buttons()
    if result is not None:
        cup_image_key = f"{cup.warna}_cup_{result}"
        if cup_image_key in image_references:
            cup_image = canvas.create_image(
                canvas_x,
                canvas_y - 0,
                image=image_references[cup_image_key],
                tags=("colored_cup", cup.warna, str(result)))
            if tile_image:
                canvas.tag_raise(cup_image, tile_image)

    # 4. Create HEAD image (top layer)
    head_image = None
    head_image_key = f"{card.warna}_head"
    if head_image_key in image_references:
        head_image = canvas.create_image(
            canvas_x,
            canvas_y - 30,
            image=image_references[head_image_key],
            tags=("cat_head", f"{card.warna}_head", "match_result"))
        canvas.tag_raise(head_image)

    # 5. Remove the original cup button
    if hasattr(cup, '_canvas_id'):
        canvas.delete(cup._canvas_id)
    cup.destroy()

    # Store references
    if not hasattr(canvas, 'computer_match_images'):
        canvas.computer_match_images = []
    canvas.computer_match_images.extend([img for img in [tile_image, cup_image, head_image] if img is not None])

    canvas.update_idletasks()


################################################### ALUR ###########################################
hide_all_except_start()
start_button = Button(command=lambda: show_all_elements())

canvas.move("all", 0, -50)
root.resizable(True, True)

# --- Refactored Utilities for Position Consistency in guiv3.py ---

# Struktur posisi tetap untuk tile cup p1 - p9
fixed_positions = {
    "p1": (387.0, 330.0),
    "p2": (563.0, 330.0),
    "p3": (738.0, 330.0),
    "p4": (387.0, 507.0),
    "p5": (563.0, 507.0),
    "p6": (738.0, 507.0),
    "p7": (387.0, 684.0),
    "p8": (563.0, 684.0),
    "p9": (738.0, 684.0),
}

# Posisi tetap kartu user (3 slot bawah)
user_card_positions = {
    "pos1": (330.0, 762.0),
    "pos2": (500.0, 762.0),
    "pos3": (670.0, 762.0),
}

# Posisi tetap kartu komputer (3 slot atas)
computer_card_positions = {
    "pos1": (330.0, 100.0),
    "pos2": (500.0, 100.0),
    "pos3": (670.0, 100.0),
}


def get_button_by_id(button_id):
    """Mengambil tombol berdasarkan ID dari semua warna"""
    all_buttons = {
        **white_buttons,
        **red_buttons,
        **blue_buttons
    }
    for btn in all_buttons.values():
        if hasattr(btn, 'id') and btn.id == button_id:
            return btn
    return None


def reset_all_positions():
    """Menempatkan semua tombol gelas (p1-p9) ke posisi tetap"""
    for btn_id, (x, y) in fixed_positions.items():
        button = get_button_by_id(btn_id)
        if button:
            try:
                button.place(x=x, y=y)
                canvas.coords(button._canvas_id, x, y)
            except Exception as e:
                print(f"Error saat memposisikan {btn_id}: {e}")


def get_user_card_button(pos_label):
    """Ambil satu tombol kartu dari posisi tertentu untuk user"""
    group = {
        "pos1": [kp11, kp21, kp31, kb11, kb21, kb31, km11, km21, km31],
        "pos2": [kp12, kp22, kp32, kb12, kb22, kb32, km12, km22, km32],
        "pos3": [kp13, kp23, kp33, kb13, kb23, kb33, km13, km23, km33],
    }
    return random.choice(group[pos_label])


def reset_user_cards():
    """Tempatkan 3 kartu user di posisi tetap dengan pilihan acak"""
    for label, pos in user_card_positions.items():
        card = get_user_card_button(label)
        card.place(x=pos[0], y=pos[1])
        card.lift()
        print(f"Kartu user {card.id} ditempatkan di {pos}")


def get_computer_card_button(pos_label):
    """Ambil satu kartu dari grup atas untuk komputer (dummy)"""
    group = {
        "pos1": [hc1],
        "pos2": [hc2],
        "pos3": [hc3],
    }
    return group[pos_label][0]


def reset_computer_cards():
    """Tempatkan 3 kartu komputer di posisi tetap"""
    for label, pos in computer_card_positions.items():
        card = get_computer_card_button(label)
        canvas.coords(card, pos[0], pos[1])
        canvas.itemconfig(card, state="normal")
        print(f"Kartu komputer ditempatkan di {pos}")


def reset_game_layout():
    """Panggil fungsi-fungsi reset posisi secara menyeluruh"""
    reset_all_positions()
    reset_user_cards()
    reset_computer_cards()


root.mainloop()